on note
    ignore_event(EVENT_ID)
    set_event_par(EVENT_ID, EVENT_PAR_0, 1)
    inc(note_held_count)

    last_played_note    := EVENT_NOTE
    last_played_note_ts := ENGINE_UPTIME
    message(f'NOTE ON <ENGINE_UPTIME >')

    layers.note_velo [ __LEFT,  EVENT_NOTE ] := EVENT_VELOCITY
    layers.note_velo [ __RIGHT, EVENT_NOTE ] := EVENT_VELOCITY

    if note_held_count = 1
        lcb_ms_counter := 0
        SEQ.first_note_ts := ENGINE_UPTIME
    end if

    if switch_MAIN.SEQ.combine = __SEQ_DUAL
        if  switch_MAIN.SoundSource.LEFT.power = __ON  and ...
            ( switch_MAIN.SEQ.LEFT.power       = __OFF ) 
            pn_ncb.a.side      := __LEFT
            pn_ncb.a.note      := EVENT_NOTE
            pn_ncb.a.velo      := EVENT_VELOCITY
            pn_ncb.a.mute_note := __NO
            call PLAY_NOTE_NCB
        end if

        if  switch_MAIN.SoundSource.RIGHT.power = __ON  and ...
            ( switch_MAIN.SEQ.RIGHT.power       = __OFF )
            pn_ncb.a.side := __RIGHT
            pn_ncb.a.note := EVENT_NOTE
            pn_ncb.a.velo := EVENT_VELOCITY
            pn_ncb.a.mute_note := __NO
            call PLAY_NOTE_NCB
        end if

        {{ ARP }}
        ARP.note_buffer_LEFT  [ ARP.cursor [ __LEFT  ] ] := EVENT_NOTE
        ARP.vel_buffer_LEFT   [ ARP.cursor [ __LEFT  ] ] := EVENT_VELOCITY
        ARP.note_buffer_RIGHT [ ARP.cursor [ __RIGHT ] ] := EVENT_NOTE
        ARP.vel_buffer_RIGHT  [ ARP.cursor [ __RIGHT ] ] := EVENT_VELOCITY
        inc( ARP.cursor [ __LEFT  ])
        inc( ARP.cursor [ __RIGHT ])
        if ( ARP.cursor [ __LEFT ] < 2 and ARP.seq_running = 0)
            call ARP.StartSeq()
        end if

    else { sequencer is in JOIN mode }

        {{ ARP }}
        ARP.note_buffer_LEFT  [ ARP.cursor [ __LEFT  ] ] := EVENT_NOTE
        ARP.vel_buffer_LEFT   [ ARP.cursor [ __LEFT  ] ] := EVENT_VELOCITY
        inc( ARP.cursor [ __LEFT  ])
        if ( ARP.cursor [ __LEFT ] < 2 and ARP.seq_running = 0)
            message("Starting the ARP")
            call ARP.StartSeq()
        end if

    end if

    for ncb_counter := __LEFT to __RIGHT
        fn053.a.side := ncb_counter
        fn053.a.note := last_played_note
        call fn053_update_single_shot_controls
    end for
    
end on
