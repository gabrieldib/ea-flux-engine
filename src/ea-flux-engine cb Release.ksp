on release
    // import "ARP/__ARP 06 release cb.ksp"
    if get_event_par(EVENT_ID, EVENT_PAR_0) = 1
        dec(note_held_count)
        layers.note_events [ __LEFT,  EVENT_NOTE ] := 0
        layers.note_events [ __RIGHT, EVENT_NOTE ] := 0

        {{ ARP }}
        if ( ARP.seq_running = 1)
            ARP.cursor_helper := 0
            ARP.i := 0
            while ( ARP.i <  ARP.cursor [ __LEFT ] )
                if ( EVENT_NOTE # %ARP.note_buffer_LEFT [ ARP.i ] )
                    ARP.note_buffer_LEFT [ ARP.cursor_helper ] := ARP.note_buffer_LEFT [ ARP.i ]
                    inc( ARP.cursor_helper)
                end if

                inc( ARP.i )
            end while
            ARP.cursor [ __LEFT ] :=  ARP.cursor_helper

            ARP.cursor_helper := 0
            ARP.i := 0
            while ( ARP.i <  ARP.cursor [ __RIGHT ] )
                if ( EVENT_NOTE # %ARP.note_buffer_RIGHT [ ARP.i ] )
                    ARP.note_buffer_RIGHT [ ARP.cursor_helper ] := ARP.note_buffer_RIGHT [ ARP.i ]
                    inc( ARP.cursor_helper)
                end if

                inc( ARP.i )
            end while
            ARP.cursor [ __RIGHT ] :=  ARP.cursor_helper

            if ( ARP.seq_running = 1 and  ARP.cursor [ __LEFT ] = 0)
                call ARP.StopSeq()
            end if
        end if

    end if

    if note_held_count <= 0
        SEQ.JOIN.current_block             := -1
        for r.i := __LEFT to __RIGHT
            SEQ.DUAL.current_block [ r.i  ] := -1
            if layers.seq_play_direction [ r.i ] = SEQ_DIRECTION_FWBW
                seq.direction_status [ r.i ] := SEQ_DIRECTION_FORWARD
            end if
        end for
        call clear_all_leds

        for rcb_counter_side := 0 to 1
            for rcb_counter_block := 0 to 3
                for rcb_counter_step := 0 to SEQ.DUAL.step_count [ rcb_counter_side, rcb_counter_block ]
                    if SEQ.showing_target [ rcb_counter_side ] = SEQ_TARGET_VELO
                        rcb_step_data := ...
                            SEQ.data.f [                                 ...
                                rcb_counter_side,                        ...
                                SEQ.showing_target [ rcb_counter_side ], ...
                                rcb_counter_step + 8 * rcb_counter_block ...
                            ]
                    else
                        rcb_step_data := ...
                            SEQ.data.f [                                 ...
                                rcb_counter_side,                        ...
                                SEQ.showing_target [ rcb_counter_side ], ...
                                rcb_counter_step + 8 * rcb_counter_block ...
                            ]
                    end if

                    if switch_MAIN.SEQ.combine = __SEQ_DUAL
                        fn033.a.dyn_value := ...
                            get_control_par_real_arr(                          ...
                                UIID_MAIN.seq.dyn_slider [ rcb_counter_side ], ...
                                CONTROL_PAR_VALUE,                             ...
                                __Y_AXIS                                       ...
                            )
                    else
                        fn033.a.dyn_value := ...
                            get_control_par_real_arr(                       ...
                                UIID_MAIN.seq.dyn_slider [ __LEFT ], ...
                                CONTROL_PAR_VALUE,                         ...
                                __Y_AXIS                                   ...
                            )
                    end if
                    fn033.a.step_value := rcb_step_data
                    call fn033_transform_step_value_into_dynamic
                

                    fn018.a.side       := rcb_counter_side
                    fn018.a.step_index := rcb_counter_block * 8 + rcb_counter_step
                    fn018.a.value      := fn033.r.transf_value.r
                    call fn018_set_seq_step_picture_state

                    fn002.a.side            := rcb_counter_side
                    fn002.a.value           := fn033.r.transf_value.r { values from the original steps table }
                    fn002.a.target          := SEQ.showing_target [ rcb_counter_side ]
                    fn002.a.table_to_update := __SEQ_DYN_TRANSF_TABLE
                    fn002.a.step_index      := rcb_counter_block * 8 + rcb_counter_step
                    call fn002_set_seq_step_value

                end for
            end for
        end for

        LFO_play_state := __OFF
        LFO_release_time [ __REL_FLAG ] := __OFF
    end if
end on
