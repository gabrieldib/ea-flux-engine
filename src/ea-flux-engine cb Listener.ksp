on listener
    // import "ARP/__ARP 07 listener cb.ksp"

    if (NI_SIGNAL_TYPE = NI_SIGNAL_TIMER_MS)
        {{ SEQUENCER }}
        if note_held_count > 0 
            if switch_MAIN.SEQ.combine = __SEQ_DUAL
                { rates are independent, we have to check against the lcb_counter and run the functions for each }
                if lcb_ms_counter mod SEQ.rate [ __LEFT ] = 0
                    {
                        update the currently playing block
                        update timestamps for firing the steps
                            we need to calculate the timestamps based on the 
                            number of steps of each block.
                            we will have the duration of the entire block
                            the duration of each step is block_dur (which is the rate basically) / step_count
                    }
                    fn007.a.side            := __LEFT
                    call fn007_update_block_and_steps_ts
                end if
                if lcb_ms_counter mod SEQ.rate [ __RIGHT ] = 0
                    fn007.a.side := __RIGHT
                    call fn007_update_block_and_steps_ts
                end if

                for lcb_play_side := __LEFT to __RIGHT
                    if SEQ.DUAL.current_block [ lcb_play_side ] > -1 and note_held_count > 0
                        { counter behavior will depend on the mode }
                        if  seq.direction_status [ lcb_play_side ] = SEQ_DIRECTION_FORWARD  
                            lcb_step_counter_start     := 0
                            lcb_step_counter_end       := ...
                                SEQ.DUAL.step_count [ lcb_play_side, SEQ.DUAL.current_block [ lcb_play_side ] ] + 1
                            SEQ.ts_counter_incrementor := 1
                        end if
                        if  seq.direction_status [ lcb_play_side ] = SEQ_DIRECTION_BACKWARD 
                            lcb_step_counter_start     := ...
                                SEQ.DUAL.step_count [ lcb_play_side, SEQ.DUAL.current_block [ lcb_play_side ] ]
                            lcb_step_counter_end       :=  -1
                            SEQ.ts_counter_incrementor := -1
                        end if

                        SEQ.ts_counter := lcb_step_counter_start
                        while ( SEQ.ts_counter # lcb_step_counter_end )

                            if  UIID_MAIN.seq.power   [ lcb_play_side ] -> value = __ON and ...
                                UIID_MAIN.layer.power [ lcb_play_side ] -> value = __ON
                                
                                p_lcb.a.side := lcb_play_side
                                call PLAY_LCB
                            end if

                            SEQ.ts_counter := SEQ.ts_counter + SEQ.ts_counter_incrementor
                        end while
                    end if
                end for 
            end if  { SEQ Dual }

            if switch_MAIN.SEQ.combine = __SEQ_JOIN
                if lcb_ms_counter mod SEQ.rate [ __LEFT ] = 0 { on JOIN we follow the left side }
                    fn007.a.side := __LEFT
                    call fn007_update_block_and_steps_ts
                end if

                if SEQ.JOIN.current_block > -1 and note_held_count > 0
                    for SEQ.ts_counter := 0 to SEQ.JOIN.step_count [ SEQ.JOIN.current_block ]
                        { left layer  }
                        if  UIID_MAIN.seq.power   [ __LEFT ] -> value = __ON and ...
                            UIID_MAIN.layer.power [ __LEFT ] -> value = __ON
                            p_lcb.a.side := __LEFT
                            call PLAY_LCB
                        end if
                        { right layer - sequencer power in JOIN is dictated by left power button }
                        if  UIID_MAIN.seq.power   [ __LEFT ] -> value = __ON and ...
                            UIID_MAIN.layer.power [ __RIGHT ] -> value = __ON
                            p_lcb.a.side := __RIGHT
                            call PLAY_LCB
                        end if
                    end for
                end if

            end if
            
        end if



        {{ LFO }}
        select(LFO_data [ LFO_WAVESHAPE ])
            case LFO_WAVESHAPE_TRI
                LFO_emitted_value := ...
                    4.0 * abs( float(lcb_ms_counter)/float(LFO_rate) - ...
                        floor( float(lcb_ms_counter)/float(LFO_rate) + 0.5 ) ) - 1.0;

            case LFO_WAVESHAPE_SIN to LFO_WAVESHAPE_SQR
                LFO_emitted_value := ...
                    sin( ...
                        LFO_sine_step * (float(lcb_ms_counter) mod (float(LFO_rate)) ) ...
                    ) {/ 2.0 + 0.5 } { the /2 + 0.5 is to adjust from -1 to 1 to return values from 0 to 1 }

                if LFO_data [ LFO_WAVESHAPE ] = LFO_WAVESHAPE_SQR
                    if LFO_emitted_value <= 0.0
                        LFO_emitted_value := -1.0
                    else
                        LFO_emitted_value := 1.0
                    end if
                end if

            case LFO_WAVESHAPE_SAW
                LFO_emitted_value := 2.0 * float(lcb_ms_counter mod LFO_rate)/float(LFO_rate) - 1.0

            case LFO_WAVESHAPE_RND
                if lcb_ms_counter mod LFO_rate = 0
                    LFO_emitted_value := float(random(-1000, 1000))/1000.0
                end if
        end select

        {{ DEMO MODE }}
        if lcb_ms_counter mod 41 = 0 and button_demo.mode = __ON
            UIID_MAIN.seq.step [ __LEFT, LFO_seq_step_count ] -> picture_state := ...
                int( (1.0 - (LFO_emitted_value / 2.0 + 0.5)) * __SEQ_STEP_VALUE_FRAMES)
            UIID_MAIN.seq.step [ __RIGHT, 31 - LFO_seq_step_count ] -> picture_state := ...
                int( (1.0 - (LFO_emitted_value / 2.0 + 0.5)) * __SEQ_STEP_VALUE_FRAMES)

            inc(LFO_seq_step_count)
            if LFO_seq_step_count > 31
                LFO_seq_step_count := 0
            end if
        end if

        { updates BPM in case it is changed, and arrays using note duration constants }
        if lcb_ms_counter mod 1000 = 0 and __BPM # 60000000.0 / float(DURATION_QUARTER)
            call LCB_data_update
        end if

        inc(lcb_ms_counter)
    end if
end on
