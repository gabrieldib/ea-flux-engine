{ post import UI figma }
declare $ARP.beat_grid := 16
declare $ARP.check_id
declare $ARP.chord_oct_counter
declare ARP.cursor [ 2 ]
declare $ARP.cursor_helper
declare $ARP.grid_counter
declare $ARP.i
declare $ARP.j
declare $ARP.k
declare $ARP.o
declare $ARP.p
declare $ARP.temp1
declare $ARP.temp2
declare $ARP.temp3
declare $ARP.temp4
declare ARP.last_random_note [ 2 ]
declare $ARP.oct_counter
declare $ARP.old_latch_time
declare ARP.played_duration [ 2 ]
declare ARP.played_note [ 2 ] // 2 sides 
declare ARP.played_velocity [ 2 ]
declare ARP.play_counter [ 2 ] 
declare $ARP.prev_arp_mode
declare $ARP.seq_running
declare $ARP.step_counter
declare $ARP.step_direction
declare $ARP.step_duration
declare $ARP.steps_played
declare $ARP.prev_step := -1
declare $ARP.repeat_counter_note
declare $ARP.repeat_counter_note_other
declare $ARP.repeat_counter_table
declare $ARP.ticks_per_step := 6
declare $ARP.tick_counter
declare  ARP.up_down_counter     [ 2 ]
declare  ARP.up_down_direction   [ 2 ]
declare  ARP.up_down_oct_counter [ 2 ]
declare $ARP.wait_time

declare %ARP.note_buffer_LEFT           [128] { all held notes in the played order }
declare %ARP.note_ids_LEFT              [128]
declare %ARP.play_buffer_LEFT           [128] { the actual notes to be played }
declare %ARP.play_down_buffer_LEFT      [128]
declare %ARP.play_up_buffer_LEFT        [128]
declare %ARP.play_vel_buffer_LEFT       [128] := (-1)
declare %ARP.play_up_vel_buffer_LEFT    [128] := (-1)
declare %ARP.play_down_vel_buffer_LEFT  [128] := (-1)
declare %ARP.sorted_buffer_LEFT         [128]
declare %ARP.sorted_vel_buffer_LEFT     [128]
declare %ARP.vel_buffer_LEFT            [128] := (-1)

declare %ARP.note_buffer_RIGHT           [128] { all held notes in the played order }
declare %ARP.note_ids_RIGHT              [128]
declare %ARP.play_buffer_RIGHT           [128] { the actual notes to be played }
declare %ARP.play_down_buffer_RIGHT      [128]
declare %ARP.play_up_buffer_RIGHT        [128]
declare %ARP.play_vel_buffer_RIGHT       [128] := (-1)
declare %ARP.play_up_vel_buffer_RIGHT    [128] := (-1)
declare %ARP.play_down_vel_buffer_RIGHT  [128] := (-1)
declare %ARP.sorted_buffer_RIGHT         [128]
declare %ARP.sorted_vel_buffer_RIGHT     [128]
declare %ARP.vel_buffer_RIGHT            [128] := (-1)

declare !ARP.state                 [2]
!ARP.state[0] := " Off"
!ARP.state[1] := " On"
declare !ARP.rates[9]
!ARP.rates[0] := " 1/64 T"
!ARP.rates[1] := " 1/32 T"
!ARP.rates[2] := " 1/32"
!ARP.rates[3] := " 1/16 T"
!ARP.rates[4] := " 1/16"
!ARP.rates[5] := " 1/8 T"
!ARP.rates[6] := " 1/8"
!ARP.rates[7] := " 1/4 T"
!ARP.rates[8] := " 1/4"

declare ui_menu $ARP.NoteOrder
    add_menu_item($ARP.NoteOrder, "As Played",  0)
    add_menu_item($ARP.NoteOrder, "Up",         1)
    add_menu_item($ARP.NoteOrder, "Down",       2)
    add_menu_item($ARP.NoteOrder, "Up - Down",  3)
    add_menu_item($ARP.NoteOrder, "Down - Up",  4)
    add_menu_item($ARP.NoteOrder, "Random",     5)
    add_menu_item($ARP.NoteOrder, "Chord",      6)

    $ARP.NoteOrder -> hide := HIDE_WHOLE_CONTROL

declare ui_menu $ARP.TableOrder
    add_menu_item($ARP.TableOrder, ">>",        0)
    add_menu_item($ARP.TableOrder, "<<",        1)
    add_menu_item($ARP.TableOrder, ">> <<",     2)
    add_menu_item($ARP.TableOrder, "<< >>",     3)
    add_menu_item($ARP.TableOrder, "???",       4)
    add_menu_item($ARP.TableOrder, "Host Sync", 5)

    $ARP.TableOrder -> hide := HIDE_WHOLE_CONTROL


{ these two tables will be hidden and will be used only for their values }
declare read ui_table %ARP.Pattern [$ARP.MAX.STEPS] (4, 4, 127)
    %ARP.Pattern -> hide := HIDE_WHOLE_CONTROL

declare read ?ARP.Pattern_real [ $ARP.MAX.STEPS ]

declare ui_table %ARP.Current [$ARP.MAX.STEPS] (4, 1, 1)
    %ARP.Current -> hide := HIDE_WHOLE_CONTROL

$ARP.i := 0
while ($ARP.i < $ARP.MAX.STEPS)
    %ARP.Pattern[$ARP.i] := 127
    inc($ARP.i)
end while


