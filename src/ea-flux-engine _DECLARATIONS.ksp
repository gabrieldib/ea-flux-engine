{ DEFINES   _____________________________________________________________________________________ }
    define __OFF               := 0
    define __ON                := 1
    define __NO                := 0
    define __YES               := 1
    define __LEFT              := 0
    define __RIGHT             := 1
    define __SEQ_DUAL          := 0
    define __SEQ_JOIN          := 1
    define __X_AXIS            := 0
    define __Y_AXIS            := 1

    define LFO_RATE_MODE       := 0
    define LFO_RATE            := 1
    define LFO_DEPTH           := 2
    define LFO_WAVESHAPE       := 3

    define LFO_WAVESHAPE_TRI   := 0
    define LFO_WAVESHAPE_SIN   := 1
    define LFO_WAVESHAPE_SQR   := 2
    define LFO_WAVESHAPE_SAW   := 3
    define LFO_WAVESHAPE_RND   := 4

    define SEQ_TYPE_UNIPOLAR   := 0
    define SEQ_TYPE_BIPOLAR    := 1

    define SEQ_TARGET_VELO     := 0
    define SEQ_TARGET_PITCH    := 1
    define SEQ_TARGET_OCTAVE   := 2
    define SEQ_TARGET_PAN      := 3
    define SEQ_TARGET_FILTER   := 4

    define __LP_FILTER_SLOT    := 5
    define __HP_FILTER_SLOT    := 6
    define __LP_FILTER_CA_SLOT := 0 // code aux
    define __HP_FILTER_CA_SLOT := 1 // code aux

    define __NO_GROUP          := -1

    define __SEQ_TARGET_LO_PASS := 0
    define __SEQ_TARGET_HI_PASS := 1

    define SEQ_DIRECTION_FORWARD  := 0
    define SEQ_DIRECTION_BACKWARD := 1
    define SEQ_DIRECTION_FWBW     := 2

    define __STEP_COUNTER_0    :=  1
    define __DIR_BTN_FORWARD   :=  2
    define __DIR_BTN_BACKWARD  :=  4
    define __DIR_BTN_FWBW      :=  8
    define __STEP_COUNTER_LAST := 16
    define __DIR_PLAY_FORWARD  := 32
    define __DIR_PLAY_BACKWARD := 64

    define __COUNTER_0_BTN_FORWARD         := 3
    define __COUNTER_0_BTN_FWBW_PLAY_FW    := 41
    define __COUNTER_LAST_BTN_FWBW_PLAY_BW := 88
    define __COUNTER_LAST_BTN_BW_PLAY_BW   := 84

    define __ARP_MODE_AS_PLAYED := 0
    define __ARP_MODE_UP        := 1
    define __ARP_MODE_DOWN      := 2
    define __ARP_MODE_UP_DOWN   := 3
    define __ARP_MODE_RANDOM    := 4
    define __ARP_MODE_CHORD     := 5

    define __NOT_PRESSED := 0
    define __PRESSED     := 1

    define __CALLER_SEQ_XY  := 0
    define __CALLER_SEQ_DYN := 1

    define __FLUX_DATA     := 0
    define __DYN_DATA      := 1
    define __ORIGINAL_DATA := 2

    define __GROUP_LEVEL := -1
    define __GROUP_NONE  := -1
    define __SLOT_NONE   := -1

    { group level }
    define __SLOT_G_SATURATION  := 0
    define __SLOT_G_DISTORTION  := 1

    { bus level }
    define __SLOT_B_LOFI        := 0
    define __SLOT_B_TAPESAT     := 1
    define __SLOT_B_LOPASS      := 2
    define __SLOT_B_HIPASS      := 3
    define __SLOT_B_DELAY       := 4
    define __SLOT_B_CHORUS      := 5
    define __SLOT_B_REVERB      := 6
    define __SLOT_B_STEREO      := 7

    define __BUS_LAYER_LEFT     := NI_BUS_OFFSET+0
    define __BUS_LAYER_RIGHT    := NI_BUS_OFFSET+1

    define __SYNC_BEAT  := 0
    define __SYNC_HZ    := 1

    define __LFO_GLOBAL_DEPTH_TARGET := -1
    define __LFO_AMOUNT_CONTROL      := 0
    define __LFO_GLOBAL_DEPTH        := 1

{ CONSTANTS _____________________________________________________________________________________ }
    {{ generic }}
        declare hide_constants [ 2 ]
            hide_constants [ 0 ] := HIDE_PART_NOTHING
            hide_constants [ 1 ] := HIDE_WHOLE_CONTROL

        declare ~__TWO_PI := NI_MATH_PI * 2.0  { for some reason 'const' won't compile }

    {{ UI }}
        // 100 elements, 6 parameters, parent1_uiid, x1, y1, parent2_uiid, x2, y2
        declare SEQ.common_elements_data [ 200, 7 ] 

        declare const PANEL_DUAL_SEQ_PARENT_UIID := 0
        declare const PANEL_JOIN_SEQ_PARENT_UIID := 1
        declare const ELEMENT_UIID               := 2
        declare const PANEL_DUAL_SEQ_X_COORD     := 3
        declare const PANEL_DUAL_SEQ_Y_COORD     := 4
        declare const PANEL_JOIN_SEQ_X_COORD     := 5
        declare const PANEL_JOIN_SEQ_Y_COORD     := 6

        declare SEQ.COMMON_ELEMENTS_COUNT
        declare UIID_FLUX_RAND_RIGHT [ 4 ] 
            UIID_FLUX_RAND_RIGHT [ 0 ] := get_ui_id(switch_MAIN.FLUXX.RIGHT.block.1)
            UIID_FLUX_RAND_RIGHT [ 1 ] := get_ui_id(switch_MAIN.FLUXX.RIGHT.block.2)
            UIID_FLUX_RAND_RIGHT [ 2 ] := get_ui_id(switch_MAIN.FLUXX.RIGHT.block.3)
            UIID_FLUX_RAND_RIGHT [ 3 ] := get_ui_id(switch_MAIN.FLUXX.RIGHT.block.4)

        declare random_sliders_x_pos [ 2 ]
            random_sliders_x_pos [ 0 ] :=  10
            random_sliders_x_pos [ 1 ] := 949

    {{ LINK }}
        declare MAIN.FX.aux_flip_link
        declare MAIN.FX.aux_flip_side
        declare MAIN.FX.aux_flip_bus

    {{ SEQ }}
        declare const SEQ_DUAL_XY_W           := 366
        declare const SEQ_JOIN_XY_W           := 740
        declare const SEQ_XY_H                :=  95
        declare const SEQ_XY_BLOCK_WIDTH_PX   :=  90

        declare const UIID_SEQ_JOIN_PANEL := get_ui_id(panel_MAIN.SEQjoin)

        declare SEQ_XY_BLOCK_START_OFFSET [ 4 ]
            SEQ_XY_BLOCK_START_OFFSET [ 0 ]   :=   0
            SEQ_XY_BLOCK_START_OFFSET [ 1 ]   :=  92
            SEQ_XY_BLOCK_START_OFFSET [ 2 ]   := 184
            SEQ_XY_BLOCK_START_OFFSET [ 3 ]   := 276

        declare const SEQ_RIGHT_X_OFFSET      := 138

        declare      ~SEQ_XY_DUAL_BLOCK_PX_W       := 1.0 / float(SEQ_DUAL_XY_W)
        declare      ~SEQ_XY_JOIN_BLOCK_PX_W       := 1.0 / float(SEQ_JOIN_XY_W)
        declare      ~SEQ_XY_DUAL_BLOCK_W     := float(SEQ_XY_BLOCK_WIDTH_PX)/float(SEQ_DUAL_XY_W)
        declare      ~SEQ_XY_JOIN_BLOCK_W     := float(SEQ_XY_BLOCK_WIDTH_PX)/float(SEQ_JOIN_XY_W)

        declare SEQ_STEP_COORD [ 2, 2, 8, 32 ] // 2 modes (dual, join), 2 sides, step count, x coord 
        declare const SEQ_MODE_DUAL := 0
        declare const SEQ_MODE_JOIN := 1

        { DUAL seq }
        declare const SEQ_DUAL_LEFT_START_PX       := 4
        declare const SEQ_DUAL_STEP2_WIDTH         := 40
        declare const SEQ_DUAL_STEP3_WIDTH         := 26
        declare const SEQ_DUAL_STEP4_WIDTH         := 19
        declare const SEQ_DUAL_STEP5_WIDTH         := 16
        declare const SEQ_DUAL_STEP6_WIDTH         := 13
        declare const SEQ_DUAL_STEP7_WIDTH         := 10
        declare const SEQ_DUAL_STEP8_WIDTH         :=  9

        declare const SEQ_DUAL_STEP2_GAP           := 2
        declare const SEQ_DUAL_STEP3_GAP           := 2
        declare const SEQ_DUAL_STEP4_GAP           := 2
        declare const SEQ_DUAL_STEP5_GAP           := 1
        declare const SEQ_DUAL_STEP6_GAP           := 2
        declare const SEQ_DUAL_STEP7_GAP           := 2
        declare const SEQ_DUAL_STEP8_GAP           := 2

        { DUAL seq }
        declare const SEQ_JOIN_LEFT_START_PX       := 71
        declare const SEQ_JOIN_STEP2_WIDTH         := 40
        declare const SEQ_JOIN_STEP3_WIDTH         := 26
        declare const SEQ_JOIN_STEP4_WIDTH         := 19
        declare const SEQ_JOIN_STEP5_WIDTH         := 16
        declare const SEQ_JOIN_STEP6_WIDTH         := 13
        declare const SEQ_JOIN_STEP7_WIDTH         := 10
        declare const SEQ_JOIN_STEP8_WIDTH         :=  9

        declare const SEQ_JOIN_STEP2_GAP           := 2
        declare const SEQ_JOIN_STEP3_GAP           := 2
        declare const SEQ_JOIN_STEP4_GAP           := 2
        declare const SEQ_JOIN_STEP5_GAP           := 1
        declare const SEQ_JOIN_STEP6_GAP           := 2
        declare const SEQ_JOIN_STEP7_GAP           := 2
        declare const SEQ_JOIN_STEP8_GAP           := 2

        declare const SEQ_JOIN_RIGHT_GAP_STEP1     := 446 - SEQ_JOIN_LEFT_START_PX // because RIGHT takes from left
        declare const SEQ_JOIN_RIGHT_GAP_STEP2     := 447 - SEQ_JOIN_LEFT_START_PX
        declare const SEQ_JOIN_RIGHT_GAP_STEP3     := 447 - SEQ_JOIN_LEFT_START_PX
        declare const SEQ_JOIN_RIGHT_GAP_STEP4     := 447 - SEQ_JOIN_LEFT_START_PX
        declare const SEQ_JOIN_RIGHT_GAP_STEP5     := 446 - SEQ_JOIN_LEFT_START_PX
        declare const SEQ_JOIN_RIGHT_GAP_STEP6     := 446 - SEQ_JOIN_LEFT_START_PX
        declare const SEQ_JOIN_RIGHT_GAP_STEP7     := 447 - SEQ_JOIN_LEFT_START_PX
        declare const SEQ_JOIN_RIGHT_GAP_STEP8     := 445 - SEQ_JOIN_LEFT_START_PX

        declare const __SEQ_ORIGINAL_TABLE   := 1
        declare const __SEQ_DYN_TRANSF_TABLE := 2
        declare const __SEQ_BOTH_TABLES      := __SEQ_ORIGINAL_TABLE .or. __SEQ_DYN_TRANSF_TABLE

        declare !SEQ.target_names [ 5 ]
            !SEQ.target_names [ 0 ] := 'VELOCITY'
            !SEQ.target_names [ 1 ] := 'PITCH'
            !SEQ.target_names [ 2 ] := 'OCTAVE'
            !SEQ.target_names [ 3 ] := 'PAN'
            !SEQ.target_names [ 4 ] := 'FILTER'

        { 90 is the width of each block }
        declare const __START := 0
        declare const __END   := 1
        declare ?SEQ_DUAL_XY_BLOCK_START_END [ 4, 2 ] // block, start or end
        declare ?SEQ_JOIN_XY_BLOCK_START_END [ 8, 2 ] // block, start or end

        declare !SEQ_step_pictures     [ 16 ] // first 8 are unipolar, last 8 bipolar
        declare !SEQ_step_led_pictures [ 16 ]

        declare SEQ.target_type [ 5 ]
            SEQ.target_type [ SEQ_TARGET_VELO   ] := SEQ_TYPE_UNIPOLAR
            SEQ.target_type [ SEQ_TARGET_PITCH  ] := SEQ_TYPE_BIPOLAR
            SEQ.target_type [ SEQ_TARGET_OCTAVE ] := SEQ_TYPE_BIPOLAR
            SEQ.target_type [ SEQ_TARGET_PAN    ] := SEQ_TYPE_BIPOLAR
            SEQ.target_type [ SEQ_TARGET_FILTER ] := SEQ_TYPE_BIPOLAR

    {{ LFO }}
        declare const __RATE_ELEMENTS_COUNT := 22
        declare const __LFO_RATE_FRAME := 1000000 / (__RATE_ELEMENTS_COUNT-1)
        declare !beat_rates_display [ __RATE_ELEMENTS_COUNT ]
            beat_rates_display [ 00 ] := "1/128"  { 128               }
            beat_rates_display [ 01 ] := "1/64 T" { 64th  triplet     }
            beat_rates_display [ 02 ] := "1/64"   { 64th              }
            beat_rates_display [ 03 ] := "1/32 T" { 32nd  triplet     }
            beat_rates_display [ 04 ] := "1/32"   { 32nd              }
            beat_rates_display [ 05 ] := "1/16 T" { sixteenth triplet }
            beat_rates_display [ 06 ] := "1/16"   { sixteenth         }
            beat_rates_display [ 07 ] := "1/8 T"  { eighth triplet    }
            beat_rates_display [ 08 ] := "1/16 D" { sixteenth dotted  }
            beat_rates_display [ 09 ] := "1/8"    { eighth            }
            beat_rates_display [ 10 ] := "1/4 T"  { quarter triplet   }
            beat_rates_display [ 11 ] := "1/8 D"  { eight dotted      }
            beat_rates_display [ 12 ] := "1/4"    { quarter           }
            beat_rates_display [ 13 ] := "1/2 T"  { half triplet      }
            beat_rates_display [ 14 ] := "1/4 D"  { quarter dotted    }
            beat_rates_display [ 15 ] := "1/2"    { half              }
            beat_rates_display [ 16 ] := "1/2 D"  { half dotted       }
            beat_rates_display [ 17 ] := "1 T"    { whole triplet     }
            beat_rates_display [ 18 ] := "1"      { whole             }
            beat_rates_display [ 19 ] := "2"      { 2 x whole         }
            beat_rates_display [ 20 ] := "3"      { 3 x whole         }
            beat_rates_display [ 21 ] := "4"      { 4 x whole         }

        declare beat_rates [ __RATE_ELEMENTS_COUNT ]
            beat_rates [ 00 ] := (DURATION_SIXTEENTH/8)/1000
            beat_rates [ 01 ] := (DURATION_SIXTEENTH_TRIPLET/2)/1000
            beat_rates [ 02 ] := (DURATION_SIXTEENTH/4)/1000
            beat_rates [ 03 ] := (DURATION_SIXTEENTH_TRIPLET/2)/1000
            beat_rates [ 04 ] := (DURATION_SIXTEENTH/2)/1000
            beat_rates [ 05 ] := (DURATION_SIXTEENTH_TRIPLET)/1000
            beat_rates [ 06 ] := (DURATION_SIXTEENTH)/1000
            beat_rates [ 07 ] := (DURATION_EIGHTH_TRIPLET)/1000
            beat_rates [ 08 ] := (3*DURATION_SIXTEENTH/2)/1000
            beat_rates [ 09 ] := (DURATION_EIGHTH)/1000
            beat_rates [ 10 ] := (DURATION_QUARTER_TRIPLET)/1000
            beat_rates [ 11 ] := (DURATION_SIXTEENTH* 3)/1000
            beat_rates [ 12 ] := (DURATION_QUARTER)/1000
            beat_rates [ 13 ] := (DURATION_QUARTER_TRIPLET * 2)/1000
            beat_rates [ 14 ] := (DURATION_EIGHTH * 3)/1000
            beat_rates [ 15 ] := (DURATION_QUARTER * 2)/1000
            beat_rates [ 16 ] := (DURATION_QUARTER * 3)/1000
            beat_rates [ 17 ] := (DURATION_QUARTER_TRIPLET * 4)/1000
            beat_rates [ 18 ] := (DURATION_QUARTER * 4)/1000
            beat_rates [ 19 ] := (DURATION_QUARTER * 8)/1000
            beat_rates [ 20 ] := (DURATION_QUARTER * 12)/1000
            beat_rates [ 21 ] := (DURATION_QUARTER * 16)/1000

        declare const __BEAT_RATE_DIVISOR := 1000000 / (__RATE_ELEMENTS_COUNT-1)

        declare !rate_mode_sync_ms.text [2]
            !rate_mode_sync_ms.text [0] := "sync"
            !rate_mode_sync_ms.text [1] := "ms"

        declare !rate_mode_sync_hz.text [2]
            !rate_mode_sync_hz.text [0] := "sync"
            !rate_mode_sync_hz.text [1] := "hz"

        declare !seq_polarity [2]
            seq_polarity [0] := "unipolar"
            seq_polarity [1] := "bipolar"

        declare const ~__SEQ_STEP_VALUE_FRAMES := 94.0

        declare LFO_targets_engine_pars [ 16 ] := (...
            ENGINE_PAR_VOLUME,                     ... {  0  Volume       }
            ENGINE_PAR_PAN,                        ... {  1  Pan          }
            ENGINE_PAR_STEREO,                     ... {  2  Width        }
            ENGINE_PAR_SHAPE,                      ... {  3  Saturation   }
            ENGINE_PAR_DAMPING,                    ... {  4  Damp         }
            ENGINE_PAR_DRIVE,                      ... {  5  Drive        }
            ENGINE_PAR_BITS,                       ... {  6  Bits         }
            ENGINE_PAR_FREQUENCY,                  ... {  7  Srate        }
            ENGINE_PAR_NOISELEVEL,                 ... {  8  Noise        }
            ENGINE_PAR_TP_GAIN,                    ... {  9  TP Gain      }
            ENGINE_PAR_TP_WARMTH,                  ... { 10  TP Warmth    }
            ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN,    ... { 11  Chorus Wet   }
            ENGINE_PAR_CH_DEPTH,                   ... { 12  Chorus Depth }
            ENGINE_PAR_CH_SPEED,                   ... { 13  Chorus Speed }
            ENGINE_PAR_CH_PHASE,                   ... { 14  Chorus Phase }
            ENGINE_PAR_SEND_EFFECT_OUTPUT_GAIN     ... { 15  Reverb       }
            )

        declare LFO_targets_GROUP [ 16 ] := ( ...
            __GROUP_NONE, ... {  0  Volume       }
            __GROUP_NONE, ... {  1  Pan          }
            __GROUP_NONE, ... {  2  Width        }
            __GROUP_NONE, ... {  3  Saturation   }
            __GROUP_NONE, ... {  4  Damp         }
            __GROUP_NONE, ... {  5  Drive        }
            __GROUP_NONE, ... {  6  Bits         }
            __GROUP_NONE, ... {  7  Srate        }
            __GROUP_NONE, ... {  8  Noise        }
            __GROUP_NONE, ... {  9  TP Gain      }
            __GROUP_NONE, ... { 10  TP Warmth    }
            __GROUP_NONE, ... { 11  Chorus Wet   }
            __GROUP_NONE, ... { 12  Chorus Depth }
            __GROUP_NONE, ... { 13  Chorus Speed }
            __GROUP_NONE, ... { 14  Chorus Phase }
            __GROUP_NONE  ... { 15  Reverb       }
            )

        declare LFO_targets_SLOT [ 16 ] := ( ...
            __SLOT_NONE,        ... {  0  Volume       }
            __SLOT_NONE,        ... {  1  Pan          }
            __SLOT_B_STEREO,      ... {  2  Width        }
            __SLOT_G_SATURATION,  ... {  3  Saturation   }
            __SLOT_G_DISTORTION,  ... {  4  Damp         }
            __SLOT_G_DISTORTION,  ... {  5  Drive        }
            __SLOT_B_LOFI,        ... {  6  Bits         }
            __SLOT_B_LOFI,        ... {  7  Srate        }
            __SLOT_B_LOFI,        ... {  8  Noise        }
            __SLOT_B_TAPESAT,     ... {  9  TP Gain      }
            __SLOT_B_TAPESAT,     ... { 10  TP Warmth    }
            __SLOT_B_CHORUS,      ... { 11  Chorus Wet   }
            __SLOT_B_CHORUS,      ... { 12  Chorus Depth }
            __SLOT_B_CHORUS,      ... { 13  Chorus Speed }
            __SLOT_B_CHORUS,      ... { 14  Chorus Phase }
            __SLOT_B_REVERB       ... { 15  Reverb       }
            )

        declare LFO_targets_BUS  [ 16 ] := ( ...
            NI_BUS_OFFSET, ... {  0  Volume       }
            NI_BUS_OFFSET, ... {  1  Pan          }
            NI_BUS_OFFSET, ... {  2  Width        }
            NI_BUS_OFFSET, ... {  3  Saturation   }
            NI_BUS_OFFSET, ... {  4  Damp         }
            NI_BUS_OFFSET, ... {  5  Drive        }
            NI_BUS_OFFSET, ... {  6  Bits         }
            NI_BUS_OFFSET, ... {  7  Srate        }
            NI_BUS_OFFSET, ... {  8  Noise        }
            NI_BUS_OFFSET, ... {  9  TP Gain      }
            NI_BUS_OFFSET, ... { 10  TP Warmth    }
            NI_BUS_OFFSET, ... { 11  Chorus Wet   }
            NI_BUS_OFFSET, ... { 12  Chorus Depth }
            NI_BUS_OFFSET, ... { 13  Chorus Speed }
            NI_BUS_OFFSET, ... { 14  Chorus Phase }
            NI_BUS_OFFSET  ... { 15  Reverb       }
            )

    {{ ADSR }}
        declare ADSR_engine_pars [ 4 ]
            ADSR_engine_pars [ 0 ] := ENGINE_PAR_ATTACK
            ADSR_engine_pars [ 1 ] := ENGINE_PAR_DECAY
            ADSR_engine_pars [ 2 ] := ENGINE_PAR_SUSTAIN
            ADSR_engine_pars [ 3 ] := ENGINE_PAR_RELEASE


{ VARIABLES _____________________________________________________________________________________ }
    { sketch ___________________________________________________________________________________ }
        declare a.i
        declare b.i
        declare c.i
        declare d.i
        declare e.i
        declare f.i
        declare g.i
        declare h.i
        declare i.i
        declare j.i
        declare k.i
        declare l.i
        declare m.i
        declare n.i
        declare o.i
        declare p.i
        declare q.i
        declare r.i
        declare s.i
        declare t.i
        declare u.i
        declare v.i
        declare w.i
        declare x.i
        declare y.i
        declare z.i

        declare ~a.r
        declare ~b.r
        declare ~c.r
        declare ~d.r
        declare ~e.r
        declare ~f.r
        declare ~g.r
        declare ~h.r
        declare ~i.r
        declare ~j.r
        declare ~k.r
        declare ~l.r
        declare ~m.r
        declare ~n.r
        declare ~o.r
        declare ~p.r
        declare ~q.r
        declare ~r.r
        declare ~s.r
        declare ~t.r
        declare ~u.r
        declare ~v.r
        declare ~w.r
        declare ~x.r
        declare ~y.r
        declare ~z.r
    {{ GENERAL }}
        declare note_held_count
        declare read SHOWING_PANEL

    {{ SEQ }}
        declare SEQ.LEFT.step_index
        declare read SEQ.DUAL.step_count  [ 2, 4 ] // side, step count
        declare read SEQ.JOIN.step_count  [ 8 ] // side, step count - not using

        declare read ?SEQ.DUAL.step_width [ 2, 4 ] // side, step witdh
        declare read ?SEQ.JOIN.step_width [ 8 ] // side, step witdh
        declare ~SEQ.l.block_index

        declare read SEQ.showing_target [ 2 ] // 2 sides, indices of the showing target

        { this is the permanent steps data defined by the user }
        declare read %SEQ.data.i [ 2, 5, 32 ] // side, target, step value
        declare read ?SEQ.data.f [ 2, 5, 32 ] // side, target, step value

        { this is the volatile data altered by the dyn slider  }
        declare read %SEQ.data.dyn.i [ 2, 5, 32 ] // side, target, step value
        declare read ?SEQ.data.dyn.f [ 2, 5, 32 ] // side, target, step value

        { this is the volatile data altered by the flux randomizer influence }
        declare read %SEQ.data.flux.i [ 2, 5, 32 ] // side, target, step value
        declare read ?SEQ.data.flux.f [ 2, 5, 32 ] // side, target, step value

        declare SEQ.DUAL.current_block [ 2 ] := (-1)
        declare SEQ.JOIN.current_block       :=  -1

        { so we can have independent intensities per target }
        declare read SEQ.flux_rand_intensity [ 2, 5 ]

        declare read layers.seq_play_direction [ 2 ]
        declare read seq.direction_status [ 2 ] // fixed or fluid depending on the direction mode

        declare read SEQ.rate [ 2 ] // one for each side

        declare seq.dyn_slider.last_value [ 2 ]
        declare seq.dyn_slider.pressed [ 2 ]

        declare SEQ.first_note_ts
        declare SEQ.DUAL.steps_timestamps [ 2, 4, 8 ]
        declare SEQ.DUAL.step_duration [ 2 ]
        declare SEQ.JOIN.steps_timestamps [ 8, 8 ]
        declare SEQ.JOIN.step_duration 

        declare SEQ.ts_counter // timestamps counter
        declare SEQ.ts_counter_incrementor

        declare SEQ.key_count
        declare SEQ.step_velocity
        declare SEQ.step_pitch
        declare SEQ.step_octave
        declare SEQ.step_pan
        declare SEQ.step_lp_filter
        declare SEQ.step_hp_filter
        declare SEQ.step_filter
        declare SEQ.flux_velo_seed
        declare SEQ.flux_velo
        declare SEQ.flux_pitch_seed
        declare SEQ.flux_pitch
        declare SEQ.flux_octave_seed
        declare SEQ.flux_octave
        declare SEQ.flux_pan_seed
        declare SEQ.flux_pan
        declare SEQ.flux_filter_seed
        declare SEQ.flux_filter

        declare SEQ.lcb_layer_side

    {{ PLAY ENGINE }}
        declare layers.note_events [ 2, 128 ]
        declare layers.note_velo   [ 2, 128 ] // stores played velocities

    {{ LCB }}
        declare read ~__BPM
        declare lcb_ms_counter
        declare lcb_play_side
        declare lcb_block_counter
        declare lcb_step_counter_start
        declare lcb_step_counter_end
        declare lcb_counter1
        declare lcb_play_direction_index

    {{ ARP }}
        declare read arp_mode [ 2 ]

    {{ LFO }}
        declare read LFO_data [ 4 ]

        declare read LFO_rate

        { this exists in case certain targets will have a different max than 10^6 }
        declare LFO_control_value_max [45]  := (500000)

        { store the LFO amount value in the range 0 - 1.0 }
        declare read ?LFO_amount_pct [ 45 ] // value per control 
        declare read ~GLOBAL_LFO.depth_float_pct
        declare ~LFO_depth_offset  { to help calculate values where global LFO depth != 100%  }
        declare ~LFO_engine_min
        declare ~LFO_engine_max
        declare ~LFO_lcb_depth_offset  { to help calculate values where global LFO depth != 100%  }
        declare ~LFO_lcb_ind_min
        declare ~LFO_lcb_ind_max
        declare ~LFO_lcb_cursor_calc
        declare read ~LFO_rate_pct  // the LFO rate squished into 0 : 1 range
        declare ~tau_hz_ms_rate_divisor
        declare ~LFO_ms_rate_label_disp_value
        declare LFO_target_MAIN.FX.LEFT.saturation
        declare ~temp_real
        declare ~LFO_target_MAIN.FX.LEFT.LFO_saturation_pct
        define  LFO.MAIN.FX.LEFT.saturation.value_range := 1000000.0

        declare read ?LFO_modulation_data     [ 44, 4 ] 
        { rows = control value id, 
          columns = control value (center), center in pct, mod min, mod max }
        declare read LFO_modulation_ring_data [ 44, 4 ] 

        declare read LFO_lcb_rate
        declare lcb_control_counter
        declare lcb_control_counter_adjusted // to access the right side and FX page 
        declare LFO_lcb_rate_ms_counter
        declare LFO_lcb_rate_beat_counter
        declare ~LFO_emitted_value
        declare read ~LFO_sine_step
        declare      ~LFO_sine_value
        declare      ~LFO_emitted_value_phase_checked
        declare ~LFO_mod_center
        declare ~LFO_mod_amount
        declare ~LFO_mod_min
        declare ~LFO_mod_max
        declare LFO_mod_ring_min
        declare LFO_mod_ring_max
        declare LFO_mod_ring_center
        declare LFO_mod_ring_amount
        declare LFO_target_array_idx
        declare LFO_rate_cycles  { to be used with RECT and RAND waveforms }
        { Triangle support }
        declare ~LFO_TRI_range_const := 1.0
        declare ~LFO_tri_step { the total cycle duration / rate }
        declare ~LFO_tri_lcb_step { LFO_tri_step * lcb_step }
        declare ~LFO_tri_period
        declare LFO.depth.lock_mode_counter
        declare LCB_update_blue_ring_indicator

        declare LFO_bus_adjustment // in the LCB loop, to  access the right side and fx page
        declare read LFO_waveform_selection

        // for when the LFO lock is on, we can retrieve the states of each local LFO from here when it is off again
        declare read LFO_global_local_recall [ 32 ]  


        { temp }
        declare LFO_seq_step_count


{ CB SPECIFIC ___________________________________________________________________________________ }
    declare uics_uiid_index
    declare uics_seq_side
    declare uics_value
    declare uics_last_value
    declare uics_alt_key
    declare uics_shift_key
    declare uics_counter
    declare uics_counter2
    declare uics_block_index
    declare uics_random
    declare uics_random_delta
    declare uics_current_value
    declare ~uics_random_delta.r
    declare ~uics_current_value.r
    declare ~uics_r_value
    declare uics_i_value
    declare uics_result
    declare @uics_title
    declare @uics_text_data
    declare uics_loop_range_min
    declare uics_loop_range_max
    declare uicbs_custom_id
    declare uicbs_control_par_value

    declare pccb_counter

    {{ xypad_MAIN.SEQ.LEFT }}
        declare seq_xy_left_click_step_index
        declare seq_xy_block_index
        declare seq_xy_shift_pressed
        declare ~seq_xy_alt_y_coord

    {{ switch_MAIN.SEQ.combine }}
        declare uicb_combine_mode
        declare uicb_combine_side
        declare uicb_combine_block
        declare uicb_combine_counter


{ FUNCTIONS   ___________________________________________________________________________________ }
    //PLAY_NOTE_NCB
    declare pn_ncb.a.side
    declare pn_ncb.a.note
    declare pn_ncb.a.velo

    //PLAY_LCB
    declare p_lcb.a.side
    declare p_lcb.l.ts_counter

    //draw_seq
    declare ds.counter

    //UICBS_MAIN.FX.modules.power | UICBS_MAIN.FX.modules.links
    declare uicbs_fx_panel_side

    //fn001_get_seq_step_index
    declare fn001.a.side // 0 left 1 right
    declare fn001.a.block_index
    declare ~fn001.l.xy_x
    declare ~fn001.l.xy_x.normalized // to fit in the 0:0.25 range
    declare fn001.r.step_index

    //fn002_update_seq_step_value
    declare fn002.a.table_to_update
    declare fn002.a.side
    declare fn002.a.target
    declare fn002.a.step_index
    declare ~fn002.a.value
    declare fn002.l.mode_side


    //fn003_set_block_step_count
    declare fn003.a.mode
    declare fn003.a.side
    declare fn003.a.block_index
    declare fn003.l.block_index_mod
    declare fn003.l.counter

    //fn004_get_current_seq_block
    declare ~fn004.a.x_coord
    declare fn004.l.block_counter
    declare fn004.r.block_index

    //fn005_set_seq_target_selector
    declare fn005.a.selector_index

    //fn006_recall_seq_values
    declare fn006.a.side
    declare fn006.l.mode_side
    declare fn006.l.counter_block
    declare fn006.l.counter_step

    //fn007_update_block_and_steps_ts
    declare fn007.a.side
    declare fn007.l.counter
    declare fn007.l.counter2
    declare fn007.l.direction_index

    //fn008_get_current_seq_join_block
    declare fn008.l.block_counter
    declare ~fn008.a.x_coord
    declare fn008.r.block_index

    //fn009_get_seq_join_step_index
    declare  fn009.a.side // 0 left 1 right
    declare  fn009.a.block_index
    declare ~fn009.l.xy_x
    declare ~fn009.l.xy_x.normalized // to fit in the 0:0.125 range
    declare  fn009.r.step_index

    //fn010_set_seq_step_value
    declare  fn010.a.step_index
    declare  fn010.l.side
    declare ~fn010.a.value

    //fn011_clear_target_activators
    declare fn011.a.side
    declare fn011.a.index

    //fn012_seq_recall_step_values
    declare fn012.a.side

    //fn013_update_seq_step_pictures
    declare fn013.a.side
    declare fn013.a.block_index
    declare fn013.l.mode_side
    declare fn013.l.step

    //fn014_seq_recall_target_steps_values_and_pictures
    declare fn014.a.side
    declare fn014.a.target_index
    declare fn014.l.counter
    declare fn014.l.counter2

    //fn015_set_seq_play_direction_btns
    declare fn015.a.side
    declare fn015.a.btn_index

    //fn016_set_data_display_from_seq_xy
    declare ~fn016.a.value
    declare fn016.a.side
    declare @fn016.r.title
    declare @fn016.r.text_data

    //fn017_get_seq_target_data
    declare fn017.a.transform_value
    declare fn017.a.side
    declare fn017.a.step_counter
    declare fn017.a.key_note
    declare fn017.a.block_step_index
    declare fn017.l.seq_data
    declare fn017.l.pan_data
    declare fn017.l.filter_data
    declare fn017.r.velocity
    declare fn017.r.pitch
    declare fn017.r.octave
    declare fn017.r.pan
    declare fn017.r.lp_filter_value
    declare fn017.r.hp_filter_value
    declare fn017.r.filter_value
    declare fn017.r.filter_type
    declare fn017.r.filter_status

    //fn018_set_seq_step_picture_state
    declare fn018.a.side
    declare fn018.a.step_index
    declare ~fn018.a.value

    //fn002_set_seq_step_value_and_ps
    declare fn019.a.side
    declare fn019.a.target
    declare fn019.a.step_index
    declare fn019.l.mode_side
    declare ~fn019.a.value

    //fn020_update_seq_target_off_label
    declare fn020.a.side
    declare fn020.a.target_index
    declare fn020.a.target_power_uiid
    declare fn020.a.seq_power_state

    //fn21_get_seq_target_active_activator
    declare fn021.a.side
    declare fn021.l.counter
    declare fn021.r.active_index

    //fn022_get_flux_values
    declare  fn022.a.side
    declare  fn022.a.step_counter
    declare  fn022.a.block_step_index
    declare  fn022.a.step_velocity
    declare  fn022.a.step_pitch
    declare  fn022.a.step_octave
    declare  fn022.a.step_pan
    declare  fn022.a.step_filter

    declare  fn022.l.flux_velo
    declare  fn022.l.flux_pitch
    declare  fn022.l.flux_octave
    declare  fn022.l.flux_pan
    declare  fn022.l.flux_filter
    declare  fn022.l.flux_velo_seed
    declare  fn022.l.flux_pitch_seed
    declare  fn022.l.flux_octave_seed
    declare  fn022.l.flux_pan_seed
    declare  fn022.l.flux_filter_seed

    declare  fn022.r.step_velocity
    declare  fn022.r.step_pitch
    declare  fn022.r.step_octave
    declare  fn022.r.step_pan
    declare  fn022.r.step_filter
    declare  fn022.r.step_lp_filter
    declare  fn022.r.step_hp_filter

    //fn023.r.check
    declare fn023.a.counter
    declare fn023.a.side
    declare fn023.r.check

    //fn024_update_flux_data_and_ui
    declare  fn024.a.step_velocity   
    declare  fn024.a.step_pitch      
    declare  fn024.a.step_octave     
    declare  fn024.a.step_pan        
    declare  fn024.a.step_filter     
    declare  fn024.a.step_lp_filter  
    declare  fn024.a.step_hp_filter  
    declare  fn024.a.side            
    declare  fn024.a.step_counter    
    declare  fn024.a.block_step_index
    declare ~fn024.l.step_velocity_flux
    declare ~fn024.l.step_pitch_flux
    declare ~fn024.l.step_octave_flux
    declare ~fn024.l.step_pan_flux
    declare ~fn024.l.step_filter_flux
    declare ~fn024.l.picture_state
    declare  fn024.l.pan_data

    //fn025_update_flux_on_all_block_steps
    declare fn025.a.side
    declare fn025.l.counter2
    declare fn025.l.counter

    //fn026_get_seq_target_data
    declare fn026.a.data_type // if flux or pre-flux -> SEQ.data.flux.i or SEQ.data.dyn.i
    declare fn026.a.side
    declare fn026.a.key_note
    declare fn026.a.step_counter
    declare fn026.a.block_step_index
    declare fn026.l.pan_data
    declare fn026.l.filter_data
    declare fn026.r.velocity
    declare fn026.r.pitch
    declare fn026.r.octave
    declare fn026.r.pan
    declare fn026.r.filter_value
    declare fn026.r.lp_filter_value
    declare fn026.r.hp_filter_value
    declare fn026.r.filter_status

    //fn027_play_lcb_core
    declare fn027.a.side
    declare fn027.a.note
    declare fn027.a.step_counter

    //fn028_update_arp_note_buffers
    declare fn028.a.side

    //fn029_clear_arp_mode_btns
    declare fn029.a.side
    declare fn029.a.index
    declare fn029.l.counter

    //fn030_set_seq_step_dyn_value
    declare  fn030.a.side
    declare  fn030.a.target
    declare  fn030.a.step_index
    declare ~fn030.a.value
    declare  fn030.l.mode_side
    declare ~fn030.l.dyn_value
    declare ~fn030.l.dyn_transf_value
    declare ~fn030.l.delta_max
    declare ~fn030.r.transf_value

    //fn031_set_dyn_sliders_picture
    declare fn031.a.reset
    declare fn031.a.side
    declare fn031.a.block_index
    declare fn031.l.step_index

    //fn032_set_seq_step_value_and_ui_via_dyn_slider
    declare fn032.a.side
    declare fn032.l.block_index
    declare fn032.l.step_index

    //fn033_transform_step_value_into_dynamic
    declare fn033.a.source
    declare fn033.a.side
    declare ~fn033.a.step_value
    declare ~fn033.a.dyn_value
    declare fn033.l.block_index
    declare fn033.l.step_index

    declare ~fn033.l.delta_max
    declare ~fn033.l.dyn_transf_value
    declare ~fn033.r.transf_value.r
    declare  fn033.r.transf_value.i

    //fn034_transform_data_according_to_seq_target
    declare  fn034.a.target_index
    declare  fn034.a.value
    declare  fn034.r.transf_value.i
    declare  fn034.r.transf_value.i_lp
    declare  fn034.r.transf_value.i_hp
    declare ~fn034.r.transf_value.r
    declare ~fn034.r.transf_value.r_lp
    declare ~fn034.r.transf_value.r_hp

    //fn035_update_random_labels
    declare  fn035.a.side
    declare ~fn035.a.value

    //fn036_set_control_param_slider
    declare fn036.a.side
    declare fn036.a.target
    declare fn036.a.control_value

    //fn037_LFO.update_intensity_ring
    declare fn037.a.side
    declare fn037.a.target
    declare fn037.a.control_value
    declare fn037.a.LFO_amount
    declare fn037.a.link
    declare fn037.l.counter
    declare fn037.l.target
    declare fn037.l.picture_state_start
    declare fn037.l.picture_state_end

    //fn038_LFO_store_LFO_mod_data
    declare fn038.a.side
    declare fn038.a.target
    declare fn038.a.control_value
    declare fn038.a.LFO_amount
    declare fn038.a.link
    declare fn038.l.target
    declare fn038.l.counter

    //fn039_set_FX_engine_par
    declare fn039.a.side
    declare fn039.a.target
    declare fn039.a.control_value
    declare fn039.a.link

    //fn040_set_MATRIX_slider_ps
    declare fn040.a.side

    //fn041_LFO_off_restore_buffer_value
    declare fn041.a.target { uses the LFO control values target constants }
    declare fn041.a.side
    declare fn041.l.target

    //fn042_show_hide_fx_panels
    declare fn042.a.side
    declare fn042.a.other_side
    declare fn042.a.panel
    declare fn042.l.panel

    //fn043_show_hide_fx_panels
    declare fn043.a.panel
    declare fn043.a.other_side
    declare fn043.a.side
    declare fn043.l.panel

    //fn044_LFO_calculate_engine_value
    declare  fn044.a.target { uses the LFO control values target constants }
    declare ~fn044.a.sine_value { uses the LFO control values target constants }
    declare  fn044.a.left_or_right
    declare ~fn044.l.calc  { for clarity  }
    declare  fn044.l.target
    declare  fn044.r.engine_value

    //fn045_set_lfo_waveshape_selectors
    declare fn045.a.index
    declare fn045.l.counter

    //fn046_set_lfo_depth_globally
    declare fn046.a.caller
    declare fn046.a.target
    declare fn046.a.target_value
    declare fn046.l.global_value

    // fn047_update_all_lfo_controls_data_and_ui
    declare fn047.l.counter
    declare fn047.l.side_counter
