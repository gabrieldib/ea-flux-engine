for i.i := 0 to 7
    SEQ_step_pictures [ i.i     ] := "slider_MAIN.sequencer.block" & i.i+1 & ".uni_95"
    SEQ_step_pictures [ i.i + 8 ] := "slider_MAIN.sequencer.block" & i.i+1 & ".bip_95"
end for
for i.i := 0 to 7
    SEQ_step_led_pictures [ i.i ] := "label_seqLed."&i.i+1&"_"& i.i+1
end for

SEQ_DUAL_XY_BLOCK_START_END [ 0, __START ] := 0.000000 
SEQ_DUAL_XY_BLOCK_START_END [ 0, __END   ] := 0.245901 // (1 / 366) * 90 = BPxW
SEQ_DUAL_XY_BLOCK_START_END [ 1, __START ] := 0.251366 // B2 px start * BPxW
SEQ_DUAL_XY_BLOCK_START_END [ 1, __END   ] := 0.497267 // start + block width (b1 end)
SEQ_DUAL_XY_BLOCK_START_END [ 2, __START ] := 0.502732 // B3 px start * BPxW
SEQ_DUAL_XY_BLOCK_START_END [ 2, __END   ] := 0.748632 // etc
SEQ_DUAL_XY_BLOCK_START_END [ 3, __START ] := 0.754098 
SEQ_DUAL_XY_BLOCK_START_END [ 3, __END   ] := 0.999999

SEQ_JOIN_XY_BLOCK_START_END [ 0, __START ] := 0.0
SEQ_JOIN_XY_BLOCK_START_END [ 0, __END   ] := 0.121621622
SEQ_JOIN_XY_BLOCK_START_END [ 1, __START ] := 0.124324324
SEQ_JOIN_XY_BLOCK_START_END [ 1, __END   ] := 0.245945946
SEQ_JOIN_XY_BLOCK_START_END [ 2, __START ] := 0.248648649
SEQ_JOIN_XY_BLOCK_START_END [ 2, __END   ] := 0.37027027
SEQ_JOIN_XY_BLOCK_START_END [ 3, __START ] := 0.372972973
SEQ_JOIN_XY_BLOCK_START_END [ 3, __END   ] := 0.499999999
SEQ_JOIN_XY_BLOCK_START_END [ 4, __START ] := 0.50
SEQ_JOIN_XY_BLOCK_START_END [ 4, __END   ] := 0.627027027
SEQ_JOIN_XY_BLOCK_START_END [ 5, __START ] := 0.62972973
SEQ_JOIN_XY_BLOCK_START_END [ 5, __END   ] := 0.751351351
SEQ_JOIN_XY_BLOCK_START_END [ 6, __START ] := 0.754054054
SEQ_JOIN_XY_BLOCK_START_END [ 6, __END   ] := 0.875675676
SEQ_JOIN_XY_BLOCK_START_END [ 7, __START ] := 0.878378378
SEQ_JOIN_XY_BLOCK_START_END [ 7, __END   ] := 0.999999990


{{ SEQ Step coord }}
{ the 0th step is always already defined because it does not move 
that's steps 0, 8, 16, 24 }
{ Dual Seq }
{ 1 step }
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  0, 0 ] := SEQ_DUAL_LEFT_START_PX - 2
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 0, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  0, 0 ]

{ 2 steps }
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  1, 0 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP2_WIDTH * 0 + SEQ_DUAL_STEP2_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  1, 1 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP2_WIDTH * 1 + SEQ_DUAL_STEP2_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 1, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  1, 0 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 1, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  1, 1 ]

{ 3 steps }
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  2, 0 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP3_WIDTH * 0 + SEQ_DUAL_STEP3_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  2, 1 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP3_WIDTH * 1 + SEQ_DUAL_STEP3_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  2, 2 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP3_WIDTH * 2 + SEQ_DUAL_STEP3_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 2, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  2, 0 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 2, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  2, 1 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 2, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  2, 2 ]

{ 4 steps }
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  3, 0 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP4_WIDTH * 0 + SEQ_DUAL_STEP4_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  3, 1 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP4_WIDTH * 1 + SEQ_DUAL_STEP4_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  3, 2 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP4_WIDTH * 2 + SEQ_DUAL_STEP4_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  3, 3 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP4_WIDTH * 3 + SEQ_DUAL_STEP4_GAP * 3
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 3, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  3, 0 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 3, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  3, 1 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 3, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  3, 2 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 3, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  3, 3 ]

{ 5 steps }
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 0 ] := SEQ_DUAL_LEFT_START_PX - 1 + SEQ_DUAL_STEP5_WIDTH * 0 + SEQ_DUAL_STEP5_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 1 ] := SEQ_DUAL_LEFT_START_PX - 1 + SEQ_DUAL_STEP5_WIDTH * 1 + SEQ_DUAL_STEP5_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 2 ] := SEQ_DUAL_LEFT_START_PX - 1 + SEQ_DUAL_STEP5_WIDTH * 2 + SEQ_DUAL_STEP5_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 3 ] := SEQ_DUAL_LEFT_START_PX - 1 + SEQ_DUAL_STEP5_WIDTH * 3 + SEQ_DUAL_STEP5_GAP * 3
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 4 ] := SEQ_DUAL_LEFT_START_PX - 1 + SEQ_DUAL_STEP5_WIDTH * 4 + SEQ_DUAL_STEP5_GAP * 4
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 4, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 0 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 4, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 1 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 4, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 2 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 4, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 3 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 4, 4 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  4, 4 ]

{ 6 steps }
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 0 ] := SEQ_DUAL_LEFT_START_PX - 1 + SEQ_DUAL_STEP6_WIDTH * 0 + SEQ_DUAL_STEP6_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 1 ] := SEQ_DUAL_LEFT_START_PX - 1 + SEQ_DUAL_STEP6_WIDTH * 1 + SEQ_DUAL_STEP6_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 2 ] := SEQ_DUAL_LEFT_START_PX - 1 + SEQ_DUAL_STEP6_WIDTH * 2 + SEQ_DUAL_STEP6_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 3 ] := SEQ_DUAL_LEFT_START_PX - 0 + SEQ_DUAL_STEP6_WIDTH * 3 + SEQ_DUAL_STEP6_GAP * 3
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 4 ] := SEQ_DUAL_LEFT_START_PX - 0 + SEQ_DUAL_STEP6_WIDTH * 4 + SEQ_DUAL_STEP6_GAP * 4
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 5 ] := SEQ_DUAL_LEFT_START_PX - 0 + SEQ_DUAL_STEP6_WIDTH * 5 + SEQ_DUAL_STEP6_GAP * 5
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 5, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 0 ] 
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 5, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 1 ] 
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 5, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 2 ] 
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 5, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 3 ] 
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 5, 4 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 4 ] 
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 5, 5 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 5 ] 

message(f' step 0 <SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 0 ]  >')
message(f' step 1 <SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 1 ]  >')
message(f' step 2 <SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 2 ]  >')
message(f' step 3 <SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 3 ]  >')
message(f' step 4 <SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 4 ]  >')
message(f' step 5 <SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  5, 5 ]  >') 

{ 7 steps }
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  6, 0 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP7_WIDTH * 0 + SEQ_DUAL_STEP7_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  6, 1 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP7_WIDTH * 1 + SEQ_DUAL_STEP7_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  6, 2 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP7_WIDTH * 2 + SEQ_DUAL_STEP7_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  6, 3 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP7_WIDTH * 3 + SEQ_DUAL_STEP7_GAP * 3
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  6, 4 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP7_WIDTH * 4 + SEQ_DUAL_STEP7_GAP * 4
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  6, 5 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP7_WIDTH * 5 + SEQ_DUAL_STEP7_GAP * 5
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  6, 6 ] := SEQ_DUAL_LEFT_START_PX + SEQ_DUAL_STEP7_WIDTH * 6 + SEQ_DUAL_STEP7_GAP * 6
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 6, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT, 6, 0 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 6, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT, 6, 1 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 6, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT, 6, 2 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 6, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT, 6, 3 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 6, 4 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT, 6, 4 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 6, 5 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT, 6, 5 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 6, 6 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT, 6, 6 ]

{ 8 steps }
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 0 ] := SEQ_DUAL_LEFT_START_PX - 2 + SEQ_DUAL_STEP8_WIDTH * 0 + SEQ_DUAL_STEP8_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 1 ] := SEQ_DUAL_LEFT_START_PX - 2 + SEQ_DUAL_STEP8_WIDTH * 1 + SEQ_DUAL_STEP8_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 2 ] := SEQ_DUAL_LEFT_START_PX - 2 + SEQ_DUAL_STEP8_WIDTH * 2 + SEQ_DUAL_STEP8_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 3 ] := SEQ_DUAL_LEFT_START_PX - 2 + SEQ_DUAL_STEP8_WIDTH * 3 + SEQ_DUAL_STEP8_GAP * 3
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 4 ] := SEQ_DUAL_LEFT_START_PX - 2 + SEQ_DUAL_STEP8_WIDTH * 4 + SEQ_DUAL_STEP8_GAP * 4
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 5 ] := SEQ_DUAL_LEFT_START_PX - 2 + SEQ_DUAL_STEP8_WIDTH * 5 + SEQ_DUAL_STEP8_GAP * 5
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 6 ] := SEQ_DUAL_LEFT_START_PX - 2 + SEQ_DUAL_STEP8_WIDTH * 6 + SEQ_DUAL_STEP8_GAP * 6
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 7 ] := SEQ_DUAL_LEFT_START_PX - 2 + SEQ_DUAL_STEP8_WIDTH * 7 + SEQ_DUAL_STEP8_GAP * 7
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 7, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 0 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 7, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 1 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 7, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 2 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 7, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 3 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 7, 4 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 4 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 7, 5 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 5 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 7, 6 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 6 ]
SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 7, 7 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 7 ]

{ Join Seq }
{ 1 step }
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  0, 0 ] := SEQ_JOIN_LEFT_START_PX - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 0, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  0, 0 ] + SEQ_JOIN_RIGHT_GAP_STEP1 - 1

{ 2 steps }
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  1, 0 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP2_WIDTH * 0 + SEQ_JOIN_STEP2_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  1, 1 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP2_WIDTH * 1 + SEQ_JOIN_STEP2_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 1, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  1, 0 ] + SEQ_JOIN_RIGHT_GAP_STEP2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 1, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  1, 1 ] + SEQ_JOIN_RIGHT_GAP_STEP2

{ 3 steps }
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  2, 0 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP3_WIDTH * 0 + SEQ_JOIN_STEP3_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  2, 1 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP3_WIDTH * 1 + SEQ_JOIN_STEP3_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  2, 2 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP3_WIDTH * 2 + SEQ_JOIN_STEP3_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 2, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  2, 0 ] + SEQ_JOIN_RIGHT_GAP_STEP3
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 2, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  2, 1 ] + SEQ_JOIN_RIGHT_GAP_STEP3
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 2, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  2, 2 ] + SEQ_JOIN_RIGHT_GAP_STEP3

{ 4 steps }
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  3, 0 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP4_WIDTH * 0 + SEQ_JOIN_STEP4_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  3, 1 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP4_WIDTH * 1 + SEQ_JOIN_STEP4_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  3, 2 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP4_WIDTH * 2 + SEQ_JOIN_STEP4_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  3, 3 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP4_WIDTH * 3 + SEQ_JOIN_STEP4_GAP * 3
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 3, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  3, 0 ] + SEQ_JOIN_RIGHT_GAP_STEP4
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 3, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  3, 1 ] + SEQ_JOIN_RIGHT_GAP_STEP4
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 3, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  3, 2 ] + SEQ_JOIN_RIGHT_GAP_STEP4
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 3, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  3, 3 ] + SEQ_JOIN_RIGHT_GAP_STEP4

{ 5 steps }
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 0 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP5_WIDTH * 0 + SEQ_JOIN_STEP5_GAP * 0 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 1 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP5_WIDTH * 1 + SEQ_JOIN_STEP5_GAP * 1 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 2 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP5_WIDTH * 2 + SEQ_JOIN_STEP5_GAP * 2 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 3 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP5_WIDTH * 3 + SEQ_JOIN_STEP5_GAP * 3 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 4 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP5_WIDTH * 4 + SEQ_JOIN_STEP5_GAP * 4 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 4, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 0 ] + SEQ_JOIN_RIGHT_GAP_STEP5 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 4, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 1 ] + SEQ_JOIN_RIGHT_GAP_STEP5 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 4, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 2 ] + SEQ_JOIN_RIGHT_GAP_STEP5 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 4, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 3 ] + SEQ_JOIN_RIGHT_GAP_STEP5 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 4, 4 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  4, 4 ] + SEQ_JOIN_RIGHT_GAP_STEP5 - 1

{ 6 steps }
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 0 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP6_WIDTH * 0 + SEQ_JOIN_STEP6_GAP * 0 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 1 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP6_WIDTH * 1 + SEQ_JOIN_STEP6_GAP * 1 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 2 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP6_WIDTH * 2 + SEQ_JOIN_STEP6_GAP * 2 - 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 3 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP6_WIDTH * 3 + SEQ_JOIN_STEP6_GAP * 3 - 0
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 4 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP6_WIDTH * 4 + SEQ_JOIN_STEP6_GAP * 4 - 0
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 5 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP6_WIDTH * 5 + SEQ_JOIN_STEP6_GAP * 5 - 0
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 5, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 0 ] + SEQ_JOIN_RIGHT_GAP_STEP6 - 2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 5, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 1 ] + SEQ_JOIN_RIGHT_GAP_STEP6 - 2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 5, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 2 ] + SEQ_JOIN_RIGHT_GAP_STEP6 - 2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 5, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 3 ] + SEQ_JOIN_RIGHT_GAP_STEP6 - 2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 5, 4 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 4 ] + SEQ_JOIN_RIGHT_GAP_STEP6 - 2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 5, 5 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  5, 5 ] + SEQ_JOIN_RIGHT_GAP_STEP6 - 2

{ 7 steps }
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  6, 0 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP7_WIDTH * 0 + SEQ_JOIN_STEP7_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  6, 1 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP7_WIDTH * 1 + SEQ_JOIN_STEP7_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  6, 2 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP7_WIDTH * 2 + SEQ_JOIN_STEP7_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  6, 3 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP7_WIDTH * 3 + SEQ_JOIN_STEP7_GAP * 3
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  6, 4 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP7_WIDTH * 4 + SEQ_JOIN_STEP7_GAP * 4
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  6, 5 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP7_WIDTH * 5 + SEQ_JOIN_STEP7_GAP * 5
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  6, 6 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP7_WIDTH * 6 + SEQ_JOIN_STEP7_GAP * 6
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 6, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT, 6, 0 ] + SEQ_JOIN_RIGHT_GAP_STEP7
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 6, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT, 6, 1 ] + SEQ_JOIN_RIGHT_GAP_STEP7
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 6, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT, 6, 2 ] + SEQ_JOIN_RIGHT_GAP_STEP7
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 6, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT, 6, 3 ] + SEQ_JOIN_RIGHT_GAP_STEP7
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 6, 4 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT, 6, 4 ] + SEQ_JOIN_RIGHT_GAP_STEP7
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 6, 5 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT, 6, 5 ] + SEQ_JOIN_RIGHT_GAP_STEP7
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 6, 6 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT, 6, 6 ] + SEQ_JOIN_RIGHT_GAP_STEP7

{ 8 steps }
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 0 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP8_WIDTH * 0 + SEQ_JOIN_STEP8_GAP * 0
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 1 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP8_WIDTH * 1 + SEQ_JOIN_STEP8_GAP * 1
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 2 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP8_WIDTH * 2 + SEQ_JOIN_STEP8_GAP * 2
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 3 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP8_WIDTH * 3 + SEQ_JOIN_STEP8_GAP * 3
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 4 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP8_WIDTH * 4 + SEQ_JOIN_STEP8_GAP * 4
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 5 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP8_WIDTH * 5 + SEQ_JOIN_STEP8_GAP * 5
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 6 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP8_WIDTH * 6 + SEQ_JOIN_STEP8_GAP * 6
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 7 ] := SEQ_JOIN_LEFT_START_PX + SEQ_JOIN_STEP8_WIDTH * 7 + SEQ_JOIN_STEP8_GAP * 7
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 7, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 0 ] + SEQ_JOIN_RIGHT_GAP_STEP8
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 7, 1 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 1 ] + SEQ_JOIN_RIGHT_GAP_STEP8
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 7, 2 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 2 ] + SEQ_JOIN_RIGHT_GAP_STEP8
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 7, 3 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 3 ] + SEQ_JOIN_RIGHT_GAP_STEP8
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 7, 4 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 4 ] + SEQ_JOIN_RIGHT_GAP_STEP8
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 7, 5 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 5 ] + SEQ_JOIN_RIGHT_GAP_STEP8
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 7, 6 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 6 ] + SEQ_JOIN_RIGHT_GAP_STEP8
SEQ_STEP_COORD [ SEQ_MODE_JOIN, __RIGHT, 7, 7 ] := SEQ_STEP_COORD [ SEQ_MODE_JOIN, __LEFT,  7, 7 ] + SEQ_JOIN_RIGHT_GAP_STEP8

{ to optimize in just a few lines: }
// for side := 0 to 1
//     for steps := 0 to 7
//         for step_count = 0 to total_steps [steps]
//             SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 0 ] := SEQ_DUAL_LEFT_START_PX - step_pixel_adj [step_count] + SEQ_DUAL_STEP8_WIDTH * 0 + SEQ_DUAL_STEP8_GAP * 0
//             SEQ_STEP_COORD [ SEQ_MODE_DUAL, __RIGHT, 7, 0 ] := SEQ_STEP_COORD [ SEQ_MODE_DUAL, __LEFT,  7, 0 ]

//         end for
//     end for
// end for

define __LFO_CT_UNIP  := 0 
define __LFO_CT_BIP   := 1 
define __LFO_CT_WIDTH := 2 
for i.i := 0 to 31
    LFO_targets_type [ i.i ] := __LFO_CT_UNIP
end for
LFO_targets_type [ __MAIN.FX.LAYER.PAN   ] := __LFO_CT_BIP
LFO_targets_type [ __MAIN.FX.LAYER.WIDTH ] := __LFO_CT_WIDTH
LFO_targets_type [ __MAIN.FX.LAYER.PAN   + __MAIN.FX.RIGHT.OFFSET ] := __LFO_CT_BIP
LFO_targets_type [ __MAIN.FX.LAYER.WIDTH + __MAIN.FX.RIGHT.OFFSET ] := __LFO_CT_WIDTH


