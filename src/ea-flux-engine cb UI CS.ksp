on ui_controls
    {{ MAIN SEQ Steps sliders }}
    if in_range( NI_UI_ID, UIID_MAIN.seq.block_steps [ 0, 0 ], UIID_MAIN.seq.block_steps [ 1, 3 ])
        // message("SEQ STEP SLIDERS _________________________________")
        uics_alt_key := 0
        if get_control_par(NI_UI_ID, CONTROL_PAR_KEY_ALT) = 1
            uics_alt_key := 1
        end if
        uics_uiid_index := NI_UI_ID - UIID_MAIN.seq.block_steps [ 0, 0 ]
        uics_seq_side   := int(float(uics_uiid_index)*0.25)
        message("uics_seq_side: " & uics_seq_side)

        { this code could be optimized / simplifyed }
        if uics_alt_key = 0
            fn003.a.side := uics_seq_side
            fn003.a.mode := switch_MAIN.SEQ.combine

            if switch_MAIN.SEQ.combine = __SEQ_DUAL
                if uics_uiid_index < 4
                    fn003.a.block_index := uics_uiid_index
                else
                    fn003.a.block_index := uics_uiid_index - 4
                end if

                SEQ.JOIN.step_count [ uics_uiid_index ] := ...
                    UIID_MAIN.seq.block_steps [ uics_seq_side, fn003.a.block_index ] -> value

                SEQ.DUAL.step_count [ uics_seq_side, fn003.a.block_index ] := ...
                    UIID_MAIN.seq.block_steps [ uics_seq_side, fn003.a.block_index ] -> value

            else
                SEQ.JOIN.step_count [ uics_uiid_index ] := ...
                    UIID_MAIN.seq.block_steps [ uics_seq_side, uics_uiid_index mod 4 ] -> value

                SEQ.DUAL.step_count [ uics_seq_side, fn003.a.block_index mod 4 ] := ...
                    UIID_MAIN.seq.block_steps [ uics_seq_side, fn003.a.block_index mod 4 ] -> value

                fn003.a.block_index := uics_uiid_index
            end if

            call fn003_set_block_step_count

        else { alt key is pressed }
            if switch_MAIN.SEQ.combine = __SEQ_DUAL
                fn003.a.mode        := switch_MAIN.SEQ.combine
                fn003.a.side        := uics_seq_side
                if uics_uiid_index < 4
                    uics_block_index := uics_uiid_index
                else
                    uics_block_index := uics_uiid_index - 4
                end if

                for uics_counter := 0 to 3
                    SEQ.JOIN.step_count [ uics_counter + uics_seq_side * 4 ] := ...
                        UIID_MAIN.seq.block_steps [ uics_seq_side, uics_block_index ] -> value

                    SEQ.DUAL.step_count [ uics_seq_side, uics_counter ] := ...
                        UIID_MAIN.seq.block_steps [ uics_seq_side, uics_block_index ] -> value

                    fn003.a.block_index := uics_block_index
                    { make all sliders the same value }
                    if uics_counter # uics_block_index
                        UIID_MAIN.seq.block_steps [ uics_seq_side, uics_counter ] -> value := ...
                            UIID_MAIN.seq.block_steps [ uics_seq_side, uics_block_index ] -> value

                        fn003.a.block_index := uics_counter
                        
                    end if
                    { update the visible steps in each block }
                    call fn003_set_block_step_count
                end for

            else
                fn003.a.mode := switch_MAIN.SEQ.combine

                for uics_counter := 0 to 1
                    for uics_counter2 := 0 to 3

                        fn003.a.side := uics_counter
                        fn003.a.block_index := uics_uiid_index

                        SEQ.JOIN.step_count [ uics_counter * 4 + uics_counter2 ] := ...
                            UIID_MAIN.seq.block_steps [ uics_seq_side, uics_uiid_index mod 4 ] -> value

                        SEQ.DUAL.step_count [ uics_counter, uics_counter2 ] := ...
                            UIID_MAIN.seq.block_steps [ uics_seq_side, uics_uiid_index mod 4 ] -> value

                        { make all sliders the same value, update all step counts but the caller }
                        if (uics_counter * 4 + uics_counter2) # uics_uiid_index
                            UIID_MAIN.seq.block_steps [ uics_counter, uics_counter2 ] -> value := ...
                                UIID_MAIN.seq.block_steps [ uics_seq_side, uics_uiid_index mod 4 ] -> value

                            fn003.a.block_index := uics_counter * 4 + uics_counter2

                        end if
                        { update the visible steps in each block }
                        // message("STEP SLIDERS: SEQ JOIN step count [ "& uics_uiid_index &" ]: " & SEQ.JOIN.step_count [ uics_counter * 4 + uics_counter2 ])
                        // message("    uics_uiid_index: " & uics_uiid_index)
                        // message("    fn003.a.block_index = " & fn003.a.block_index)
                        call fn003_set_block_step_count

                    end for
                end for
            end if

        end if
    end if


    {{ SEQ XY PADS }}
    if NI_UI_ID = UIID_MAIN.SEQ.xypads [ 0 ] or NI_UI_ID = UIID_MAIN.SEQ.xypads [ 1 ]
        uics_uiid_index := NI_UI_ID - UIID_MAIN.SEQ.xypads [ 0 ]

        if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_LEFT_BUTTON_DOWN
            { capture the step index on click }
            call get_seq_dual_step_index
        end if

        if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_DRAG
            {   if draw is off, we keep the step index recorded when we pressed the mouse button down 
                if it is on, we update the step_index }
            if UIID_MAIN.controls.draw [ uics_uiid_index ] -> value = __ON
                call get_seq_dual_step_index
            end if
        end if

        fn002.a.step_index := fn001.r.step_index
        fn002.a.side       := uics_uiid_index
        fn002.a.value      := get_control_par_real_arr( ...
            UIID_MAIN.SEQ.xypads [ uics_uiid_index ],   ...
            CONTROL_PAR_VALUE,                          ...
            1                                           ...
        ) 
        call fn002_set_seq_step_value
    end if


    {{ ADSR CONTROLS }}
    if in_range(NI_UI_ID, UIID_MAIN.ADSR_controls [ 0, 0 ], UIID_MAIN.ADSR_controls [ 1, 3 ])
        uics_uiid_index := NI_UI_ID - UIID_MAIN.ADSR_controls [ 0, 0 ]
        if uics_uiid_index < 4
            uics_seq_side := __LEFT
        else
            uics_seq_side := __RIGHT
        end if

        { the group, and slot will have to be defined when we have the group structure }
        set_engine_par(                                                               ...
            ADSR_engine_pars [ uics_uiid_index mod 4 ],                               ...
            UIID_MAIN.ADSR_controls[ uics_seq_side, uics_uiid_index mod 4 ] -> value, ...
            uics_seq_side,                                                            ...
            get_mod_idx(uics_seq_side, "ENV_AHDSR"),                                  ...
            -1                                                                        ...
        )
    end if


    {{ SEQ RATE }}
    if NI_UI_ID = UIID_MAIN.SEQ.rate_sliders [ 0 ] or NI_UI_ID = UIID_MAIN.SEQ.rate_sliders [ 1 ]
        if NI_UI_ID = UIID_MAIN.SEQ.rate_sliders [ 0 ]
            uics_uiid_index := 0
        else
            uics_uiid_index := 1
        end if

        message("uiid: " & uics_uiid_index)
        UIID_MAIN.display_title -> text := "Rate"
        UIID_MAIN.display_value -> text := ...
            beat_rates_display [ (UIID_MAIN.SEQ.rate_sliders [ uics_uiid_index ] -> value) / __BEAT_RATE_DIVISOR ]
        
        SEQ.rate [ uics_uiid_index ] := beat_rates [ (UIID_MAIN.SEQ.rate_sliders [ uics_uiid_index ] -> value) / __BEAT_RATE_DIVISOR ]

        if uics_uiid_index = 0
            slider_MAIN.FLRNDjoin.amount := UIID_MAIN.SEQ.rate_sliders [ 0 ] -> value
        end if
    end if 


    {{ SEQ JOIN Rate }}
    if NI_UI_ID = get_ui_id(slider_MAIN.FLRNDjoin.amount)
        UIID_MAIN.display_title -> text := "Rate"
        UIID_MAIN.display_value -> text := ...
            beat_rates_display [ slider_MAIN.FLRNDjoin.amount / __BEAT_RATE_DIVISOR ]

        SEQ.rate [ __LEFT ] := beat_rates [ slider_MAIN.FLRNDjoin.amount / __BEAT_RATE_DIVISOR ]

        UIID_MAIN.SEQ.rate_sliders [ 0 ] -> value := slider_MAIN.FLRNDjoin.amount
    end if
    

    {{ SEQ MAIN target activators }}
    if in_range(NI_UI_ID, UIID_MAIN.target_activators[ 0, 0], UIID_MAIN.target_activators [ 1, 4])
        uics_uiid_index := NI_UI_ID - UIID_MAIN.target_activators [ 0, 0 ]
        { this expression in the index returns 0 or 1 }
        uics_seq_side   := int(float(uics_uiid_index)*0.2) { 1/ 5 options }

        SEQ.showing_target [ uics_seq_side ] := uics_uiid_index mod 5 

        fn011.a.side  := uics_seq_side
        fn011.a.index := uics_uiid_index mod 5
        call fn011_clear_target_activators

        fn014.a.side         := uics_seq_side
        fn014.a.target_index := uics_uiid_index mod 5
        call fn014_seq_recall_target_steps_values_and_pictures

        { light the middle selector in case both sides match }
        if uics_uiid_index < 5
            if UIID_MAIN.target_activators [ __RIGHT, uics_uiid_index ] -> value = __ON
                fn005.a.selector_index := uics_uiid_index
                call fn005_set_seq_target_selector
            end if
        else
            if UIID_MAIN.target_activators [ __LEFT, uics_uiid_index mod 5 ] -> value = __ON
                fn005.a.selector_index := uics_uiid_index mod 5
                call fn005_set_seq_target_selector
            end if
        end if
    end if


    {{ SEQ MAIN TARGET SELECTORS }}
    if in_range(NI_UI_ID, UIID_MAIN.target_selectors [ 0 ], UIID_MAIN.target_selectors [ 4 ])
        fn005.a.selector_index := NI_UI_ID - UIID_MAIN.target_selectors [ 0 ]
        call fn005_set_seq_target_selector

        SEQ.showing_target [ __LEFT  ] := uics_uiid_index
        SEQ.showing_target [ __RIGHT ] := uics_uiid_index

        fn011.a.side  := __LEFT
        fn011.a.index := fn005.a.selector_index
        call fn011_clear_target_activators
        fn011.a.side  := __RIGHT
        fn011.a.index := fn005.a.selector_index
        call fn011_clear_target_activators

        fn014.a.side         := __LEFT
        fn014.a.target_index := fn005.a.selector_index
        call fn014_seq_recall_target_steps_values_and_pictures

        fn014.a.side         := __RIGHT
        fn014.a.target_index := fn005.a.selector_index
        call fn014_seq_recall_target_steps_values_and_pictures

    end if

end on