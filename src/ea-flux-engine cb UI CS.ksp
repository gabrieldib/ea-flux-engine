on ui_controls
    {{ MAIN SEQ Steps sliders }}
    if in_range( NI_UI_ID, UIID_MAIN.seq.block_steps [ 0, 0 ], UIID_MAIN.seq.block_steps [ 1, 3 ])
        uics_uiid_index := NI_UI_ID - UIID_MAIN.seq.block_steps [ 0, 0 ]
        if switch_MAIN.SEQ.combine = __SEQ_DUAL
            if uics_uiid_index < 4
                uics_seq_side := __LEFT
            else
                uics_seq_side := __RIGHT
                uics_uiid_index := uics_uiid_index - 4 
            end if
            SEQ.DUAL.step_count [ uics_seq_side, uics_uiid_index ] := UIID_MAIN.seq.block_steps [ uics_seq_side, uics_uiid_index ] -> value

            fn003.a.mode        := switch_MAIN.SEQ.combine
            fn003.a.side        := uics_seq_side
            fn003.a.block_index := uics_uiid_index
            call fn003_set_block_step_count
        end if
    end if

    {{ SEQ XY PADS }}
    if NI_UI_ID = UIID_MAIN.SEQ.xypads [ 0 ] or NI_UI_ID = UIID_MAIN.SEQ.xypads [ 1 ]
        uics_uiid_index := NI_UI_ID - UIID_MAIN.SEQ.xypads [ 0 ]

        if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_LEFT_BUTTON_DOWN
            { capture the step index on click }
            call get_seq_dual_step_index
        end if

        if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_DRAG
            {   if draw is off, we keep the step index recorded when we pressed the mouse button down 
                if it is on, we update the step_index }
            if UIID_MAIN.controls.draw [ uics_uiid_index ] -> value = __ON
                call get_seq_dual_step_index
            end if
        end if

        fn002.a.step_index := fn001.r.step_index
        fn002.a.side       := uics_uiid_index
        fn002.a.value      := get_control_par_real_arr( ...
            UIID_MAIN.SEQ.xypads [ uics_uiid_index ],   ...
            CONTROL_PAR_VALUE,                          ...
            1                                           ...
        ) 
        call fn002_set_seq_step_value
    end if

    {{ MAIN TARGET SELECTORS }}
    if in_range(NI_UI_ID, UIID_MAIN.target_selectors [ 0 ], UIID_MAIN.target_selectors [ 4 ])
        fn005.a.selector_index := NI_UI_ID - UIID_MAIN.target_selectors [ 0 ]
        call fn005_set_seq_target_selector
    end if

    {{ ADSR CONTROLS }}
    if in_range(NI_UI_ID, UIID_MAIN.ADSR_controls [ 0, 0 ], UIID_MAIN.ADSR_controls [ 1, 3 ])
        uics_uiid_index := NI_UI_ID - UIID_MAIN.ADSR_controls [ 0, 0 ]
        if uics_uiid_index < 4
            uics_seq_side := __LEFT
        else
            uics_seq_side := __RIGHT
        end if

        { the group, and slot will have to be defined when we have the group structure }
        set_engine_par(                                                               ...
            ADSR_engine_pars [ uics_uiid_index mod 4 ],                               ...
            UIID_MAIN.ADSR_controls[ uics_seq_side, uics_uiid_index mod 4 ] -> value, ...
            uics_seq_side,                                                            ...
            get_mod_idx(uics_seq_side, "ENV_AHDSR"),                                  ...
            -1                                                                        ...
        )
    end if

    {{ SEQ RATE }}
    if NI_UI_ID = UIID_MAIN.SEQ.rate_sliders [ 0 ] or NI_UI_ID = UIID_MAIN.SEQ.rate_sliders [ 1 ]
        if NI_UI_ID = UIID_MAIN.SEQ.rate_sliders [ 0 ]
            uics_uiid_index := 0
        else
            uics_uiid_index := 1
        end if

        message("uiid: " & uics_uiid_index)
        UIID_MAIN.display_title -> text := "Rate"
        UIID_MAIN.display_value -> text := ...
            beat_rates_display [ (UIID_MAIN.SEQ.rate_sliders [ uics_uiid_index ] -> value) / __BEAT_RATE_DIVISOR ]
        
        SEQ.rate [ uics_uiid_index ] := beat_rates [ (UIID_MAIN.SEQ.rate_sliders [ uics_uiid_index ] -> value) / __BEAT_RATE_DIVISOR ]
    end if 
    
end on