{{ DEV MODE }}
    on ui_control (button_dev.exit)
        panel_dev -> UI_HIDE
    end on
    


{{ GLOBAL }}
    on ui_control (menu_MAIN.LEFT.soundSource)
        selected_source [ __LEFT ] := menu_MAIN.LEFT.soundSource
        for i.i := __MAIN.FX.SATURATION to __MAIN.FX.DISTORTION.DRIVE
            LFO_targets_GROUP [ __LEFT, i.i ] := selected_source [ __LEFT ]
        end for

        fn062.a.side := __LEFT
        call fn062_update_range_data
        call draw_key_ranges
    end on

    on ui_control (menu_MAIN.RIGHT.soundSource)
        selected_source [ __RIGHT ] := menu_MAIN.RIGHT.soundSource
        for i.i := __MAIN.FX.SATURATION to __MAIN.FX.DISTORTION.DRIVE
            LFO_targets_GROUP [ __RIGHT, i.i ] := selected_source [ __RIGHT ]
        end for

        fn062.a.side := __RIGHT
        call fn062_update_range_data

        call draw_key_ranges
    end on

    on ui_control (switch_MAIN.LEFT.randomizer.link)
        switch_MAIN.RIGHT.randomizer.link := switch_MAIN.LEFT.randomizer.link
    end on

    on ui_control (switch_MAIN.RIGHT.randomizer.link)
        switch_MAIN.LEFT.randomizer.link := switch_MAIN.RIGHT.randomizer.link
    end on

{{ DEV MODE }}

    on ui_control (button_dev.mode)
        if  get_control_par(get_ui_id(button_dev.mode), CONTROL_PAR_KEY_SHIFT) = 1 and ...
            get_control_par(get_ui_id(button_dev.mode), CONTROL_PAR_KEY_ALT) = 1   and ...
            get_control_par(get_ui_id(button_dev.mode), CONTROL_PAR_KEY_CONTROL) = 1

            message(f'dev mode!')
            panel_dev -> UI_SHOW
        end if
    end on
    
    on ui_control (button_dev.exit)
        panel_dev -> UI_HIDE
    end on
    
    on ui_control (button_dev.rescan.sources)
        label_dev.monitor -> text := "$ > Scanning all keys in all groups..."
        for g.i := 0 to ((NUM_GROUPS-1)/2)
            l.i := 0
            h.i := 0
            for n.i := 0 to 127
                e.i := play_note(n.i, 1, 0, 100000)
                set_event_par_arr(e.i, EVENT_PAR_ALLOW_GROUP, 0, ALL_GROUPS)
                set_event_par_arr(e.i, EVENT_PAR_ALLOW_GROUP, 1, g.i)
                change_vol(e.i, -200000, 0)
                wait(10000)
                sources_range_data [ g.i, n.i ] := get_event_par(e.i, EVENT_PAR_ZONE_ID)
                if sources_range_data [ g.i, n.i ] > 0
                    if l.i = 0
                        l.i := n.i
                        message(f'    source <g.i> range started at <n.i>')
                    end if
                    h.i := n.i
                end if
            end for
            message(f'    source <g.i> range ended at <h.i>')
            sources_range_length [ g.i ] := h.i - l.i
            sources_range [ g.i, __RANGE_LOW  ] := l.i
            sources_range [ g.i, __RANGE_HIGH ] := h.i
            add_text_line(label_dev.monitor, f'$ > source <g.i> lo: <l.i> hi: <h.i> length: <sources_range_length[ g.i ] > ')

        end for
        add_text_line(label_dev.monitor, "$ > Sources scanning done.")
        call draw_key_ranges
    end on

    on ui_control (button_dev.reload.group.names)
        call update_sources_names
    end on

    on ui_control (valueedit_rr)
        __ROUND_ROBIN_MAX := valueedit_rr
    end on
    
    on ui_control (valueedit_velo)
        __VELOCITIES_COUNT := valueedit_velo
    end on
    


{{ MAIN }}
    on ui_control (switch_MAIN.SEQ.combine)
        switch_MAIN.SEQ.LEFT.power := __ON

        if switch_MAIN.SEQ.combine = __SEQ_JOIN
            DUAL_SEQ.link_buffer [ __LEFT  ] := switch_MAIN.SEQ.LEFT.link
            DUAL_SEQ.link_buffer [ __RIGHT ] := switch_MAIN.SEQ.RIGHT.link
            switch_MAIN.SEQ.LEFT.link  := __OFF
            switch_MAIN.SEQ.RIGHT.link := __OFF

            DUAL_SEQ.hmz.link_buffer [ __LEFT  ] := switch_MAIN.LEFT.HMZ.link
            DUAL_SEQ.hmz.link_buffer [ __RIGHT ] := switch_MAIN.RIGHT.HMZ.link
            switch_MAIN.LEFT.HMZ.link  := __OFF
            switch_MAIN.RIGHT.HMZ.link := __OFF

            { turn on the velocity }
            UIID_MAIN.seq.target_activators [ __LEFT,  SEQ_TARGET_VELO ] -> value := __ON
            UIID_MAIN.seq.target_power      [ __LEFT,  SEQ_TARGET_VELO ] -> value := __ON
            UIID_MAIN.seq.target_power      [ __RIGHT, SEQ_TARGET_VELO ] -> value := __ON
        else
            UIID_MAIN.seq.power [ __LEFT  ] -> value := __ON
            UIID_MAIN.seq.power [ __RIGHT ] -> value := __ON
            switch_MAIN.SEQ.LEFT.link  := DUAL_SEQ.link_buffer [ __LEFT  ]
            switch_MAIN.SEQ.RIGHT.link := DUAL_SEQ.link_buffer [ __RIGHT ]

            switch_MAIN.LEFT.HMZ.link  := DUAL_SEQ.hmz.link_buffer [ __LEFT  ]
            switch_MAIN.RIGHT.HMZ.link := DUAL_SEQ.hmz.link_buffer [ __RIGHT ]
        end if

        call clear_all_leds

        call draw_seq
        // call clear_all_leds
        { recall block steps numbers and steps pictures }
        fn003.a.mode := switch_MAIN.SEQ.combine
        for uicb_combine_counter := 0 to 3
            fn003.a.block_index := uicb_combine_counter
            fn003.a.side := __LEFT
            call fn003_set_block_step_count
            fn003.a.side := __RIGHT
            call fn003_set_block_step_count
        end for

        { recall picture states for steps labels }
        fn006.a.side := __LEFT
        call fn006_recall_seq_values
        fn006.a.side := __RIGHT
        call fn006_recall_seq_values

        { change text alignment on target selectors }
        call set_seq_target_selectors_text_alignment

        // panel_MAIN.2SEQ    -> hide := switch_MAIN.SEQ.combine * HIDE_WHOLE_CONTROL
        // panel_MAIN.SEQjoin -> hide := abs(1-switch_MAIN.SEQ.combine) * HIDE_WHOLE_CONTROL

        for uicb_combine_counter := __LEFT to __RIGHT
            if  uicb_combine_counter = __LEFT or (switch_MAIN.SEQ.combine = __SEQ_DUAL and uicb_combine_counter = __RIGHT) 
                message(f'    Combine counter: <uicb_combine_counter>')
                fn021.a.side := uicb_combine_counter
                call fn21_get_seq_target_active_activator

                fn020.a.seq_power_state   := UIID_MAIN.seq.power [ uicb_combine_counter ] -> value
                fn020.a.side              := uicb_combine_counter
                fn020.a.target_index      := fn021.r.active_index
                fn020.a.target_power_uiid := UIID_MAIN.seq.target_power [ uicb_combine_counter, fn021.r.active_index ]
                call fn020_update_seq_target_state
            end if

            fn051.a.side := uicb_combine_counter
            call fn051_set_layer_panels_state
            
            fn060.a.seq_power_state := fn020.a.seq_power_state
            fn060.a.side            := uicb_combine_counter
            call fn060_set_filters_bypass_state
        end for

        panel_MAIN.2SEQ.LEFT.fluxxArp  -> UI_SHOW
        panel_MAIN.2SEQ.RIGHT.fluxxArp -> UI_SHOW
    end on

    on ui_control(xypad_MAIN.matrix.center)
        if (NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_LEFT_BUTTON_DOWN)
            MATRIX.matrix.center.mouseON[0]:= 1
            if (xypad_MAIN.matrix.center[0] < 0.5 and xypad_MAIN.matrix.center[1] < 0.5)
                MATRIX.matrix.center.mouseON[1]:= 1
            end if
            if (xypad_MAIN.matrix.center[0] >= 0.5 and xypad_MAIN.matrix.center[1] < 0.5)
                MATRIX.matrix.center.mouseON[1]:= 2
            end if
            if (xypad_MAIN.matrix.center[0] < 0.5 and xypad_MAIN.matrix.center[1] >= 0.5)
                MATRIX.matrix.center.mouseON[1]:= 3
            end if
            if (xypad_MAIN.matrix.center[0] >= 0.5 and xypad_MAIN.matrix.center[1] >= 0.5)
                MATRIX.matrix.center.mouseON[1]:= 4
            end if
        end if

        if (NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_LEFT_BUTTON_UP)
            MATRIX.matrix.center.mouseON[0]:= 0
        end if

        UIID_MAIN.display_title -> text := "Volume"

        { while dragging LAYER A }
        if (MATRIX.matrix.center.mouseON[1] = 2 or MATRIX.matrix.center.mouseON[1] = 3)
            label_MAIN.matrix.centerLR   -> picture_state:= int(255.0 * xypad_MAIN.matrix.center[0] )
            
            slider_MAIN.FX.LEFT.layer.volume := 1000000 - int(xypad_MAIN.matrix.center[0] * 1000000.0)

            fn036.a.side          := __LEFT
            fn036.a.target        := __MAIN.FX.LAYER.VOLUME 
            fn036.a.control_value := slider_MAIN.FX.LEFT.layer.volume
            call fn036_set_control_param_slider
            UIID_MAIN.display_value -> text := ...
                get_engine_par_disp(ENGINE_PAR_VOLUME, __GROUP_NONE, __SLOT_NONE, NI_BUS_OFFSET) & "dB"
        end if

        { while dragging  LAYER B }
        if (MATRIX.matrix.center.mouseON[1] = 1 or MATRIX.matrix.center.mouseON[1] = 4)
            label_MAIN.matrix.centerRL   -> picture_state:= int(255.0 * xypad_MAIN.matrix.center[0])

            slider_MAIN.FX.RIGHT.layer.volume := int(xypad_MAIN.matrix.center[0] * 1000000.0)

            fn036.a.side          := __RIGHT
            fn036.a.target        := __MAIN.FX.LAYER.VOLUME + __MAIN.FX.RIGHT.OFFSET
            fn036.a.control_value := slider_MAIN.FX.RIGHT.layer.volume
            call fn036_set_control_param_slider
            UIID_MAIN.display_value -> text := ...
                get_engine_par_disp(ENGINE_PAR_VOLUME, __GROUP_NONE, __SLOT_NONE, NI_BUS_OFFSET+1) & "dB"
        end if
    end on

    on ui_control (switch_MAIN.LEFT.HMZ.link)
        switch_MAIN.RIGHT.HMZ.link := switch_MAIN.LEFT.HMZ.link
    end on
    
    on ui_control (switch_MAIN.RIGHT.HMZ.link)
        switch_MAIN.LEFT.HMZ.link := switch_MAIN.RIGHT.HMZ.link
    end on
    
    on ui_control (switch_crossfade)
        fn036.a.control_value := UIID_controls [ __MAIN.FX.LAYER.VOLUME ] -> value
        fn036.a.side          := __LEFT
        fn036.a.target        := __MAIN.FX.LAYER.VOLUME
        call fn036_set_control_param_slider()
        if switch_crossfade = __ON
            UIID_MAIN.FX.links [ UIID_FX.parameter_to_module [ __MAIN.FX.LAYER.VOLUME ] ] -> value := __OFF
            UIID_MAIN.FX.links [ UIID_FX.parameter_to_module [ __MAIN.FX.LAYER.VOLUME + __MAIN.FX.RIGHT.OFFSET ] ] -> value := __OFF
        end if
    end on
    

{{ SEQ }}
    on ui_control (xypad_MAIN.SEQ.join)
        uicb_jxy_side := __LEFT
        if xypad_MAIN.SEQ.join [ __X_AXIS ] >= 0.5
            uicb_jxy_side := __RIGHT
        end if
        if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_LEFT_BUTTON_DOWN
            { capture the step index on click }
            call get_seq_step_index
            { make the mouse movement slower in case SHIFT is pressed }
            if get_control_par(xypad_MAIN.SEQ.join, CONTROL_PAR_KEY_SHIFT) = __ON
                xypad_MAIN.SEQ.join -> mouse_behaviour_y := 100
            end if

            uics_r_value := ...
                get_control_par_real_arr( ...
                    xypad_MAIN.SEQ.join,  ...
                    CONTROL_PAR_VALUE,    ...
                    __Y_AXIS              ...
                )

            { fix the vertical movement to the first clicked value in case ALT is pressed }
            uics_alt_key := __OFF
            if get_control_par(xypad_MAIN.SEQ.join, CONTROL_PAR_KEY_ALT) = __ON
                uics_alt_key := __ON
                seq_xy_alt_y_coord := uics_r_value 
            end if

            uics_control_key := __OFF
            if get_control_par(xypad_MAIN.SEQ.join, CONTROL_PAR_KEY_CONTROL ) = __ON
                uics_control_key := __ON
                seq_xy_alt_y_coord := 0.5
            end if

            { Reset the dyn slider to center since we are defining a step value directly }
            fn031.a.reset := __ON
            fn031.a.side  := __LEFT
            call fn031_set_dyn_sliders_picture
        end if

        if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_DRAG
            {   if draw is off, we keep the step index recorded when we pressed the mouse button down 
                if it is on, we update the step_index }
            if UIID_MAIN.controls.draw [ __LEFT ] -> value = __ON { we are using the LEFT draw button on JOIN mode }
                call get_seq_step_index
                message(f'    Step Index: <fn001.r.step_index > | X: <get_control_par_real_arr(xypad_MAIN.SEQ.join, CONTROL_PAR_VALUE, __X_AXIS)>')
            end if
            if uics_alt_key = __ON or uics_control_key = __ON
                uics_r_value := seq_xy_alt_y_coord
            else
                uics_r_value := xypad_MAIN.SEQ.join [ __Y_AXIS ]
            end if
            // message("UICB XY JOIN DRAGGING ____________________________________")
            // message(f'    Block: <fn008.r.block_index>'')
            // message(f'    Step Index: <fn009.r.step_index> | <xypad_MAIN.SEQ.join[__X_AXIS]>')
            // message(f'    uics_r_value : <uics_r_value >')
        end if

        fn002.a.side            := uicb_jxy_side
        fn002.a.value           := uics_r_value
        fn002.a.target          := SEQ.showing_target [ uicb_jxy_side ]
        fn002.a.table_to_update := __SEQ_BOTH_TABLES
        fn002.a.step_index      := fn001.r.step_index mod 32
        call fn002_set_seq_step_value
        
        fn018.a.side       := uicb_jxy_side
        fn018.a.step_index := fn001.r.step_index mod 32
        fn018.a.value      := uics_r_value
        call fn018_set_seq_step_picture_state
    end on

    on ui_control (switch_MAIN.SEQ.LEFT.randomize)
        if switch_MAIN.SEQ.LEFT.link = __ON
            switch_MAIN.SEQ.RIGHT.randomize := switch_MAIN.SEQ.LEFT.randomize
        end if
    end on
    
    on ui_control (switch_MAIN.SEQ.RIGHT.randomize)
        if switch_MAIN.SEQ.LEFT.link = __ON
            switch_MAIN.SEQ.LEFT.randomize := switch_MAIN.SEQ.RIGHT.randomize
        end if
    end on


{{ LFO }}
    on ui_control (slider_MAIN.LFO.rate)
        { direct rate values updates based on DURATION CONSTANTS }
        call update_lfo_rate
        { ui updates }
        message(f'index: <int(float( 161-slider_MAIN.LFO.rate) / 7.619047)>')

        call update_lfo_viz
        call update_lfo_aux_data

        if switch_MAIN.LFO.lock = __OFF
            call fn047_update_all_lfo_controls_data_and_ui
        else
            fn046.a.caller       := __LFO_GLOBAL_DEPTH
            fn046.a.target_value := slider_MAIN.LFO.depth
            call fn046_set_lfo_depth_globally
        end if
    end on

    on ui_control ( slider_MAIN.LFO.depth )
        label_MAIN.LFO.visualRate  -> picture_state := ...
        (slider_MAIN.LFO.depth/31250) * 64 + int(float(slider_MAIN.LFO.rate)/2.539682)

        // label_MAIN.LFO.visualDepth  -> picture_state := ...
        // (slider_MAIN.LFO.depth/31250) * 64 + (slider_MAIN.LFO.rate/15873)

        ~GLOBAL_LFO.depth_float_pct := float(slider_MAIN.LFO.depth)/1000000.0
        
        label_MAIN.LFO.depth -> text := slider_MAIN.LFO.depth / 10000 & "%"

        { when the LFO lock is on, all LFO amounts in the whole instruments are set together }
        if switch_MAIN.LFO.lock = __OFF
            call fn047_update_all_lfo_controls_data_and_ui
        else
            fn046.a.caller       := __LFO_GLOBAL_DEPTH
            fn046.a.target_value := slider_MAIN.LFO.depth
            call fn046_set_lfo_depth_globally
        end if 
    end on

    on ui_control (switch_MAIN.LFO.sync)
        label_MAIN.LFO.sync -> text := rate_mode_sync_hz.text [ switch_MAIN.LFO.sync ]
        call update_lfo_aux_data
    end on

    on ui_control (switch_MAIN.LFO.power)
        if switch_MAIN.LFO.power = __OFF
            for uicb_counter := 0 to 15
                for uicb_counter2 := __LEFT to __RIGHT
                    fn041.a.target := uicb_counter
                    fn041.a.side   := uicb_counter2
                    call fn041_LFO_off_restore_buffer_value
                end for
            end for

            label_MAIN.matrix.center.mod.LR -> UI_HIDE
            label_MAIN.matrix.center.mod.RL -> UI_HIDE
        else
            label_MAIN.matrix.center.mod.LR -> UI_SHOW
            label_MAIN.matrix.center.mod.RL -> UI_SHOW
        end if
    end on


{{ FX REVERB }}

{{ DEMO MODE }}
    on ui_control (button_demo.mode)
        if button_demo.mode = __OFF
            fn006.a.side := __LEFT
            call fn006_recall_seq_values
            fn006.a.side := __RIGHT
            call fn006_recall_seq_values
        end if
    end on


