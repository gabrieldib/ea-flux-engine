// import "ARP/__ARP 04 ui cb.ksp"
{{ DEBUG }}

on ui_control (hide_bg)
    label_SEQjoin.background   -> hide := hide_bg * 16
    label_MAIN.2SEQ.background -> hide := hide_bg * 16
end on


{{ MAIN }}
on ui_control (switch_MAIN.SEQ.combine)
    call draw_seq
    call seq_recall_all_step_values

    panel_MAIN.2SEQ    -> hide := switch_MAIN.SEQ.combine * HIDE_WHOLE_CONTROL
    panel_MAIN.SEQjoin -> hide := abs(1-switch_MAIN.SEQ.combine) * HIDE_WHOLE_CONTROL
end on

{{ SEQ }}
on ui_control (xypad_MAIN.SEQ.join)
    if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_LEFT_BUTTON_DOWN
        { capture the step index on click }
        call get_seq_join_step_index
    end if

    if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_DRAG
        {   if draw is off, we keep the step index recorded when we pressed the mouse button down 
            if it is on, we update the step_index }
        if UIID_MAIN.controls.draw [ 0 ] -> value = __ON { we are using the LEFT draw button on JOIN mode }
            call get_seq_join_step_index
        end if
    end if
    message("UICB XY JOIN ____________________________________")
    message("Block: " & fn008.r.block_index)
    message("Step Index: " & fn009.r.step_index & "   |   " & xypad_MAIN.SEQ.join[0])

    if xypad_MAIN.SEQ.join [ 0 ] < 0.5
        fn010.l.side := __LEFT
    else
        fn010.l.side := __RIGHT
    end if
    fn010.a.step_index := fn009.r.step_index
    fn010.a.value      := xypad_MAIN.SEQ.join [ 1 ] // y coord 
    call fn010_set_seq_step_value
end on



{{ LFO }}
on ui_control (slider_MAIN.LFO.rate)
    call update_lfo_ms_rates
    label_MAIN.LFO.rate -> text := beat_rates_display [ slider_MAIN.LFO.rate / __BEAT_RATE_DIVISOR ]
end on

{{ DEMO MODE }}
on ui_control (button_demo.mode)
    if button_demo.mode = __OFF
        fn006.a.side := __LEFT
        call fn006_recall_seq_values
        fn006.a.side := __RIGHT
        call fn006_recall_seq_values
    end if
end on

on ui_control ( slider_MAIN.FX.LEFT.layer.volume)
    set_engine_par(ENGINE_PAR_VOLUME, slider_MAIN.FX.LEFT.layer.volume, -1, -1, NI_BUS_OFFSET+0)
    UIID_MAIN.display_title -> text := "Volume"
    UIID_MAIN.display_value -> text := get_engine_par_disp(ENGINE_PAR_VOLUME, -1, -1, NI_BUS_OFFSET+0) & "dB"
end on
on ui_control ( slider_MAIN.FX.LEFT.layer.pan)
    set_engine_par(ENGINE_PAR_PAN, slider_MAIN.FX.LEFT.layer.pan, -1, -1, NI_BUS_OFFSET+0)
    UIID_MAIN.display_title -> text := "Pan"
    UIID_MAIN.display_value -> text := get_engine_par_disp(ENGINE_PAR_PAN, -1, -1, NI_BUS_OFFSET+0)
end on
on ui_control ( slider_MAIN.FX.LEFT.layer.width)
    // set_engine_par(parameter, value, group, slot, generic)
end on
on ui_control ( slider_MAIN.FX.RIGHT.layer.volume)
    set_engine_par(ENGINE_PAR_VOLUME, slider_MAIN.FX.RIGHT.layer.volume, -1, -1, NI_BUS_OFFSET+1)
    UIID_MAIN.display_title -> text := "Volume"
    UIID_MAIN.display_value -> text := get_engine_par_disp(ENGINE_PAR_VOLUME, -1, -1, NI_BUS_OFFSET+1) & "dB"
end on
on ui_control ( slider_MAIN.FX.RIGHT.layer.pan)
    set_engine_par(ENGINE_PAR_PAN, slider_MAIN.FX.RIGHT.layer.pan, -1, -1, NI_BUS_OFFSET+1)
    UIID_MAIN.display_title -> text := "Pan"
    UIID_MAIN.display_value -> text := get_engine_par_disp(ENGINE_PAR_PAN, -1, -1, NI_BUS_OFFSET+1)
end on
on ui_control ( slider_MAIN.FX.RIGHT.layer.width)
    // set_engine_par(parameter, value, group, slot, generic)
end on
