// import "ARP/__ARP 04 ui cb.ksp"
{{ DEBUG }}

on ui_control (hide_bg)
    label_SEQjoin.background   -> hide := hide_bg * 16
    label_MAIN.2SEQ.background -> hide := hide_bg * 16
end on


{{ MAIN }}
on ui_control (switch_MAIN.SEQ.combine)
    call draw_seq
    
    { recall block steps numbers and steps pictures }
    fn003.a.mode := switch_MAIN.SEQ.combine
    for uicb_combine_counter := 0 to 7
        fn003.a.block_index := uicb_combine_counter
        fn003.a.side := __LEFT
        call fn003_set_block_step_count
        fn003.a.side := __RIGHT
        call fn003_set_block_step_count
    end for

    { recall picture states for steps labels }
    fn006.a.side := __LEFT
    call fn006_recall_seq_values
    fn006.a.side := __RIGHT
    call fn006_recall_seq_values


    { change text alignment on target selectors }
    call set_seq_target_selectors_text_alignment

    // if switch_MAIN.SEQ.combine = __SEQ_DUAL
    //     { mirror the right side, for whe }
    //     fn011.a.side  := __RIGHT
    //     fn011.a.index := SEQ.showing_target [ __LEFT ]
    //     call fn011_clear_target_activators
    //     SEQ.showing_target [ __RIGHT ] := SEQ.showing_target [ __LEFT ] 
    // end if

    panel_MAIN.2SEQ    -> hide := switch_MAIN.SEQ.combine * HIDE_WHOLE_CONTROL
    panel_MAIN.SEQjoin -> hide := abs(1-switch_MAIN.SEQ.combine) * HIDE_WHOLE_CONTROL
end on

{{ SEQ }}
on ui_control (xypad_MAIN.SEQ.join)
    if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_LEFT_BUTTON_DOWN
        { capture the step index on click }
        call get_seq_join_step_index
    end if

    if NI_MOUSE_EVENT_TYPE = NI_MOUSE_EVENT_TYPE_DRAG
        {   if draw is off, we keep the step index recorded when we pressed the mouse button down 
            if it is on, we update the step_index }
        if UIID_MAIN.controls.draw [ 0 ] -> value = __ON { we are using the LEFT draw button on JOIN mode }
            call get_seq_join_step_index
        end if
    end if
    message("UICB XY JOIN ____________________________________")
    message("Block: " & fn008.r.block_index)
    message("Step Index: " & fn009.r.step_index & "   |   " & xypad_MAIN.SEQ.join[0])

    if xypad_MAIN.SEQ.join [ 0 ] < 0.5
        fn010.l.side := __LEFT
    else
        fn010.l.side := __RIGHT
    end if
    fn010.a.step_index := fn009.r.step_index
    fn010.a.value      := xypad_MAIN.SEQ.join [ 1 ] // y coord 
    call fn010_set_seq_step_value
end on



{{ LFO }}
    on ui_control (slider_MAIN.LFO.rate)
        { direct rate values updates based on DURATION CONSTANTS }
        call update_lfo_rate
        { ui updates }
        message(f'index: <( slider_MAIN.LFO.rate) / __BEAT_RATE_DIVISOR>')
        call update_lfo_viz

        call update_lfo_aux_data

        if switch_MAIN.LFO.lock = __OFF
            call fn047_update_all_lfo_controls_data_and_ui
        else
            fn046.a.caller       := __LFO_GLOBAL_DEPTH
            fn046.a.target_value := slider_MAIN.LFO.depth
            call fn046_set_lfo_depth_globally
        end if
    end on

    on ui_control ( slider_MAIN.LFO.depth )
        label_MAIN.LFO.visualRate  -> picture_state := ...
        (slider_MAIN.LFO.depth/31250) * 64 + (slider_MAIN.LFO.rate/15873)

        label_MAIN.LFO.visualDepth  -> picture_state := ...
        (slider_MAIN.LFO.depth/31250) * 64 + (slider_MAIN.LFO.rate/15873)

        ~GLOBAL_LFO.depth_float_pct := float(slider_MAIN.LFO.depth)/1000000.0
        
        label_MAIN.LFO.depth -> text := slider_MAIN.LFO.depth / 10000 & "%"

        { when the LFO lock is on, all LFO amounts in the whole instruments are set together }
        if switch_MAIN.LFO.lock = __OFF
            call fn047_update_all_lfo_controls_data_and_ui
        else
            fn046.a.caller       := __LFO_GLOBAL_DEPTH
            fn046.a.target_value := slider_MAIN.LFO.depth
            call fn046_set_lfo_depth_globally
        end if 
    end on

    on ui_control (switch_MAIN.LFO.sync)
        label_MAIN.LFO.sync -> text := rate_mode_sync_hz.text [ switch_MAIN.LFO.sync ]
        call update_lfo_aux_data
    end on

{{ DEMO MODE }}
on ui_control (button_demo.mode)
    if button_demo.mode = __OFF
        fn006.a.side := __LEFT
        call fn006_recall_seq_values
        fn006.a.side := __RIGHT
        call fn006_recall_seq_values
    end if
end on


