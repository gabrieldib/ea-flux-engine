// import "ARP/__ARP 04 ui cb.ksp"

{{ LFO }}
on ui_control (slider_MAIN.LFO.rate)
    call update_lfo_ms_rates
    label_MAIN.LFO.rate -> text := beat_rates_display [ slider_MAIN.LFO.rate / __BEAT_RATE_DIVISOR ]
end on

{{ DEMO MODE }}
on ui_control (button_demo.mode)
    if button_demo.mode = __OFF
        fn006.a.side := __LEFT
        call fn006_recall_seq_values
        fn006.a.side := __RIGHT
        call fn006_recall_seq_values
    end if
end on

on ui_control ( slider_MAIN.FX.LEFT.layer.volume)
    set_engine_par(ENGINE_PAR_VOLUME, slider_MAIN.FX.LEFT.layer.volume, -1, -1, NI_BUS_OFFSET+0)
    UIID_MAIN.display_title -> text := "Volume"
    UIID_MAIN.display_value -> text := get_engine_par_disp(ENGINE_PAR_VOLUME, -1, -1, NI_BUS_OFFSET+0) & "dB"
end on
on ui_control ( slider_MAIN.FX.LEFT.layer.pan)
    set_engine_par(ENGINE_PAR_PAN, slider_MAIN.FX.LEFT.layer.pan, -1, -1, NI_BUS_OFFSET+0)
    UIID_MAIN.display_title -> text := "Pan"
    UIID_MAIN.display_value -> text := get_engine_par_disp(ENGINE_PAR_PAN, -1, -1, NI_BUS_OFFSET+0)
end on
on ui_control ( slider_MAIN.FX.LEFT.layer.width)
    // set_engine_par(parameter, value, group, slot, generic)
end on
on ui_control ( slider_MAIN.FX.RIGHT.layer.volume)
    set_engine_par(ENGINE_PAR_VOLUME, slider_MAIN.FX.RIGHT.layer.volume, -1, -1, NI_BUS_OFFSET+1)
    UIID_MAIN.display_title -> text := "Volume"
    UIID_MAIN.display_value -> text := get_engine_par_disp(ENGINE_PAR_VOLUME, -1, -1, NI_BUS_OFFSET+1) & "dB"
end on
on ui_control ( slider_MAIN.FX.RIGHT.layer.pan)
    set_engine_par(ENGINE_PAR_PAN, slider_MAIN.FX.RIGHT.layer.pan, -1, -1, NI_BUS_OFFSET+1)
    UIID_MAIN.display_title -> text := "Pan"
    UIID_MAIN.display_value -> text := get_engine_par_disp(ENGINE_PAR_PAN, -1, -1, NI_BUS_OFFSET+1)
end on
on ui_control ( slider_MAIN.FX.RIGHT.layer.width)
    // set_engine_par(parameter, value, group, slot, generic)
end on
